# utils/filter.py
import re
from typing import Optional, Dict

# –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–∑–≤ –ª–æ–∫–∞—Ü—ñ–π –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É
_AIRALERT_MAP = {
    "–∫–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–∫–∏—ó–≤—Å—å–∫–∞ –æ–±–ª": "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–∫–∏—ó–≤—â–∏–Ω–∞": "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–±—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–±—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä-–Ω": "–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–±—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π": "–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
    # –º—ñ—Å—Ç–æ –ö–∏—ó–≤ ‚Äî –∑–∞–≤–∂–¥–∏ —ñ–≥–Ω–æ—Ä—É—î–º–æ –¥–ª—è –∞–≤—Ç–æ—Ç—Ä–∏–≤–æ–≥–∏
    "–º. –∫–∏—ó–≤": "–º. –ö–∏—ó–≤",
    "–∫–∏—ó–≤": "–º. –ö–∏—ó–≤",
    "–≥–æ—Ä–æ–¥ –∫–∏–µ–≤": "–º. –ö–∏—ó–≤",
    "–º –∫–∏—ó–≤": "–º. –ö–∏—ó–≤",
}

# –ª–∏—à–µ —Ü—ñ –¥–≤–∞ —Ä–µ–≥—ñ–æ–Ω–∏ –∑–∞–ø—É—Å–∫–∞—é—Ç—å/–∑–Ω—ñ–º–∞—é—Ç—å —Ç—Ä–∏–≤–æ–≥—É
_ALLOWED_DISTRICTS = {"–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω"}

# —Å—É–≤–æ—Ä–∏–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è @air_alert_ua
_AIRALERT_RE = re.compile(
    r"(–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞\s+—Ç—Ä–∏–≤–æ–≥–∞|–≤—ñ–¥–±—ñ–π\s+—Ç—Ä–∏–≤–æ–≥–∏)\s+–≤\s+([^\n#\.\!\r]+)",
    re.IGNORECASE | re.UNICODE,
)

def _normalize_location(raw: str) -> str:
    key = raw.strip().lower()
    key = re.sub(r"\s+", " ", key)
    return _AIRALERT_MAP.get(key, raw.strip())

def _airalert_classify(text: str, url: str) -> Optional[Dict]:
    m = _AIRALERT_RE.search(text or "")
    if not m:
        return None
    typ, loc = m.group(1), m.group(2)
    loc_norm = _normalize_location(loc)

    # —ñ–≥–Ω–æ—Ä—É—î–º–æ –º. –ö–∏—ó–≤ –ø–æ–≤–Ω—ñ—Å—Ç—é
    if loc_norm == "–º. –ö–∏—ó–≤":
        return None

    if loc_norm not in _ALLOWED_DISTRICTS:
        return None

    evt_type = "alarm" if "–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞" in typ.lower() else "all_clear"
    return {
        "district": loc_norm,
        "text": text,
        "url": url,
        "id": hash(text + url),
        "type": evt_type,
    }

# –∑–∞–≥—Ä–æ–∑–∏/—Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω—ñ –ø—ñ–¥–∫–∞–∑–∫–∏ –¥–ª—è –Ω–µ–æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ (info)
_THREATS = [
    "üõµ", "üöÄ", "üí•", "‚úàÔ∏è", "üí£", "üõ©Ô∏è", "üéØ", "üß®", "üö®", "üî•",
    "—à–∞—Ö–µ–¥", "—à–∞—Ö–µ–¥–∏", "shahed", "—à–∞hed", "–º–æ–ø–µ–¥", "–º–æ–ø–µ–¥–∏",
    "–¥—Ä–æ–Ω", "–¥—Ä–æ–Ω–∏", "–±–ø–ª–∞", "–±–µ–∑–ø—ñ–ª–æ—Ç–Ω–∏–∫", "–±–µ–∑–ø—ñ–ª–æ—Ç–Ω–∏–∫–∏",
    "—Ä–∞–∫–µ—Ç–∞", "—Ä–∞–∫–µ—Ç–∏", "—Ä–∞–∫–µ—Ç–Ω",
    "–±–∞–ª—ñ—Å—Ç–∏–∫–∞", "–±–∞–ª—ñ—Å—Ç–∏—á–Ω",
    "—ñ—Å–∫–∞–Ω–¥–µ—Ä", "–∫–∏–Ω–∂–∞–ª", "–∫–∞–ª—ñ–±—Ä",
    "–ø—É—Å–∫", "–ø—É—Å–∫–∏", "–∑–∞–ø—É—Å–∫", "–∑–∞–ø—É—Å–∫–∏",
    "–∑–ª—ñ—Ç", "–∑–ª—å–æ—Ç", "–∞–≤—ñ–∞—Ü—ñ—è",
    "—É–¥–∞—Ä", "—É–¥–∞—Ä–∏", "–æ–±—Å—Ç—Ä—ñ–ª", "–æ–±—Å—Ç—Ä—ñ–ª–∏",
    "–≤–∏–±—É—Ö", "–≤–∏–±—É—Ö–∏", "–ø—Ä–∏–ª—ñ—Ç", "–ø—Ä–∏–ª—å–æ—Ç", "–ø—Ä–∏–ª—å–æ—Ç–∏",
    "—Å–∏—Ä–µ–Ω–∞", "–Ω–µ–±–µ–∑–ø–µ–∫–∞", "–∑–∞–≥—Ä–æ–∑–∞",
    "—à–∞—Ö–µ–¥–æ–≤", "–¥—Ä–æ–Ω–æ–≤", "–±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫", "–±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–∏",
    "—Ä–∞–∫–µ—Ç—ã", "—Ä–∞–∫–µ—Ç–Ω", "–±–∞–ª–ª–∏—Å—Ç–∏–∫", "–∏—Å–∫–∞–Ω–¥–µ—Ä", "–∫–∞–ª–∏–±—Ä",
    "–≤–∑–ª–µ—Ç", "–∞–≤–∏–∞—Ü–∏—è",
    "—É–¥–∞—Ä", "—É–¥–∞—Ä—ã", "–æ–±—Å—Ç—Ä–µ–ª", "–æ–±—Å—Ç—Ä–µ–ª—ã",
    "–≤–∑—Ä—ã–≤", "–≤–∑—Ä—ã–≤—ã", "–ø—Ä–∏–ª–µ—Ç", "–ø—Ä–∏–ª–µ—Ç—ã",
    "–æ–ø–∞—Å–Ω–æ—Å—Ç", "—É–≥—Ä–æ–∑–∞",
]

_REGION_HINTS = [
    "–±—Ä–æ–≤–∞—Ä", "–±—Ä–æ–≤–∞—Ä–∏", "–±—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π", "–∫–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–∫–∏—ó–≤—â–∏–Ω–∞", "–∫–∏—ó–≤",
    # –ø—Ä–∏–ª–µ–≥–ª—ñ —Ç–æ–ø–æ–Ω—ñ–º–∏ ‚Äî —è–∫ —Ö—ñ–Ω—Ç –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    "–∫–Ω—è–∂–∏—á", "—Ç—Ä–µ–±—É—Ö", "–∫–∞–ª–∏–Ω—ñ–≤–∫", "–≤–µ–ª–∏–∫–∞ –¥–∏–º–µ—Ä", "–º–∞–ª–∞ –¥–∏–º–µ—Ä",
    "–±–æ–≥–¥–∞–Ω—ñ–≤–∫", "–∫—Ä–∞—Å–∏–ª—ñ–≤–∫", "–ø–æ–≥—Ä–µ–±–∏", "–∑–∞–∑–∏–º", "–ª—ñ—Ç–∫–∏", "–ø—É—Ö—ñ–≤–∫",
    "—Ä–æ–∂–Ω–∏", "—Å–≤—ñ—Ç–∏–ª—å–Ω", "—Å–µ–º–∏–ø–æ–ª–∫", "–∫–≤—ñ—Ç–Ω–µ–≤", "–ø–µ—Ä–µ–º–æ–≥", "–≥–æ–≥–æ–ª", "–∫–∞–ª–∏—Ç–∞",
    "–±–æ—Ä–∏—Å–ø—ñ–ª", "—Ç—Ä–æ—î—â–∏–Ω", "–ª—ñ—Å–æ–≤", "–¥–∞—Ä–Ω–∏—Ü", "–≤–∏—à–≥–æ—Ä–æ–¥", "–æ–±—É—Ö", "—ñ—Ä–ø—ñ–Ω", "–±—É—á–∞",
    "–≥–æ—Å—Ç–æ–º–µ–ª", "–≤–∏—à–Ω–µ–≤", "–≤–∞—Å–∏–ª—å–∫", "–±–µ—Ä–µ–∑–∞–Ω", "–±–∞—Ä–∏—à—ñ–≤–∫",
]

# —Å–ø–µ—Ü-—Å–ª–æ–≤–æ —Å–∞–º–µ –¥–ª—è bro_revisor (–¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç—Ä–∏–≥–µ—Ä)
_BRO_REVISOR_HINTS = ["–Ω–∞ –Ω–∞—Å"]

def _info_from_unofficial(text: str, url: str, source: Optional[str]) -> Optional[Dict]:
    low = (text or "").lower()

    # bro_revisor: –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ —î "–Ω–∞ –Ω–∞—Å"
    if source and source.lower() == "bro_revisor":
        if any(h in low for h in _BRO_REVISOR_HINTS):
            return {
                "district": None,
                "text": text,
                "url": url,
                "id": hash(text + url),
                "type": "info",
            }
        # —è–∫—â–æ –Ω–µ –∑–±—ñ–≥–ª–æ—Å—è ‚Äî –¥–∞–ª—ñ –ø—Ä–∞—Ü—é—î –∑–∞–≥–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –Ω–∏–∂—á–µ

    # –î–ª—è —ñ–Ω—à–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ (—ñ bro_revisor —Ç–µ–∂): –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ê–ë–û —Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ö—ñ–Ω—Ç–∞, –ê–ë–û –∑–∞–≥—Ä–æ–∑–∏
    if any(r in low for r in _REGION_HINTS) or any(t in low for t in _THREATS):
        return {
            "district": None,
            "text": text,
            "url": url,
            "id": hash(text + url),
            "type": "info",
        }
    return None

def classify_message(text: str, url: str, source: Optional[str] = None) -> Optional[Dict]:
    """
    - –î–ª—è @air_alert_ua: –ø–æ–≤–µ—Ä—Ç–∞—î 'alarm'/'all_clear' —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ö–∏—ó–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ –∞–±–æ –ë—Ä–æ–≤–∞—Ä—Å—å–∫–æ–≥–æ —Ä–∞–π–æ–Ω—É.
      '–º. –ö–∏—ó–≤' —Ç–∞ —ñ–Ω—à—ñ –ª–æ–∫–∞—Ü—ñ—ó —ñ–≥–Ω–æ—Ä—É—é—Ç—å—Å—è (None).
    - –î–ª—è —ñ–Ω—à–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ (—É —Ç.—á. bro_revisor): –ø–æ–≤–µ—Ä—Ç–∞—î 'info', —è–∫—â–æ —î –•–û–ß–ê –ë –æ–¥–∏–Ω –∑ –æ–∑–Ω–∞–∫:
        ‚Ä¢ –±—É–¥—å-—è–∫–∏–π —Ç–æ–ø–æ–Ω—ñ–º –∑ REGION_HINTS, –ê–ë–û
        ‚Ä¢ –±—É–¥—å-—è–∫–∞ –∑–∞–≥—Ä–æ–∑–∞ –∑ THREATS,
        ‚Ä¢ –¥–ª—è bro_revisor –¥–æ–¥–∞—Ç–∫–æ–≤–æ —Ç—Ä–∏–≥–µ—Ä: —Ñ—Ä–∞–∑–∞ "–Ω–∞ –Ω–∞—Å".
      –ü–µ—Ä–µ—Å–∏–ª–∫–∞ –≤ –∫–∞–Ω–∞–ª –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤ main.py –ª–∏—à–µ –ø—ñ–¥ —á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏.
    """
    if not text:
        return None

    if source and source.lower() == "air_alert_ua":
        return _airalert_classify(text, url)

    return _info_from_unofficial(text, url, source)
