# utils/filter.py
import re

# –ù–∞—à—ñ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ —Ä–µ–≥—ñ–æ–Ω–∏ (–Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ–±–∏—Ç—å—Å—è —Ç—É—Ç –∂–µ)
ALLOWED_DISTRICTS = {"–±—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–∫–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å"}

# –ü–æ—à—É–∫–æ–≤—ñ –∫–ª—é—á—ñ –¥–ª—è –≥–µ–æ —ñ —à–≤–∏–¥–∫–∏—Ö –∑–∞–≥—Ä–æ–∑ (–¥–ª—è INFO –∑ –Ω–µ–æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö)
REGION_KEYWORDS = [
    "–±—Ä–æ–≤–∞—Ä", "–±—Ä–æ–≤–∞—Ä–∏", "–±—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π",
    "–∫–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–∫–∏—ó–≤—â–∏–Ω–∞", "–∫–∏—ó–≤",
    "–∫–Ω—è–∂–∏—á", "—Ç—Ä–µ–±—É—Ö", "–∫–∞–ª–∏–Ω—ñ–≤–∫", "–≤–µ–ª–∏–∫–∞ –¥–∏–º–µ—Ä", "–º–∞–ª–∞ –¥–∏–º–µ—Ä",
    "–±–æ–≥–¥–∞–Ω—ñ–≤–∫", "–∫—Ä–∞—Å–∏–ª—ñ–≤–∫", "–ø–æ–≥—Ä–µ–±", "–∑–∞–∑–∏–º", "–ª—ñ—Ç–∫", "–ø—É—Ö—ñ–≤–∫",
    "—Ä–æ–∂–Ω", "—Å–≤—ñ—Ç–∏–ª—å–Ω", "—Å–µ–º–∏–ø–æ–ª–∫", "–∫–≤—ñ—Ç–Ω–µ–≤", "–ø–µ—Ä–µ–º–æ–≥", "–≥–æ–≥–æ–ª", "–∫–∞–ª–∏—Ç",
    "–±–æ—Ä–∏—Å–ø—ñ–ª", "—Ç—Ä–æ—î—â–∏–Ω", "–ª—ñ—Å–æ–≤", "–¥–∞—Ä–Ω–∏—Ü", "–≤–∏—à–≥–æ—Ä–æ–¥", "–æ–±—É—Ö",
    "—ñ—Ä–ø—ñ–Ω", "–±—É—á–∞", "–≥–æ—Å—Ç–æ–º–µ–ª", "–≤–∏—à–Ω–µ–≤", "–≤–∞—Å–∏–ª—å–∫", "–±–µ—Ä–µ–∑–∞–Ω", "–±–∞—Ä–∏—à—ñ–≤–∫",
]
RAPID_THREATS = [
    "–±–∞–ª—ñ—Å—Ç–∏–∫", "–±–∞–ª–ª–∏—Å—Ç–∏–∫",
    "—ñ—Å–∫–∞–Ω–¥–µ—Ä", "–∏—Å–∫–∞–Ω–¥–µ—Ä",
    "–∫–∏–Ω–∂–∞–ª",
    "–º–∏–≥-31", "–º—ñ–≥-31", "–º–∏–≥ 31", "–º—ñ–≥ 31", "mig-31", "mig 31",
    "–∑–ª—ñ—Ç", "–≤–∑–ª–µ—Ç", "—Å—Ç–∞—Ä—Ç",
    "–ø—É—Å–∫", "–ø—É—Å–∫–∏", "–∑–∞–ø—É—Å–∫", "–∑–∞–ø—É—Å–∫–∏",
]
THREAT_WORDS = [
    "—à–∞—Ö–µ–¥", "shahed", "–¥—Ä–æ–Ω", "–±–ø–ª–∞", "—Ä–∞–∫–µ—Ç–∞", "–±–∞–ª—ñ—Å—Ç–∏–∫", "—ñ—Å–∫–∞–Ω–¥–µ—Ä", "–∫–∏–Ω–∂–∞–ª",
]

# ------------------------------------------------------------
# –û–§–Ü–¶–Ü–ô–ù–Ü –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø @air_alert_ua: —Ä–æ–±–∏–º–æ –∫—ñ–ª—å–∫–∞ —à–∞–±–ª–æ–Ω—ñ–≤
# –ü—Ä–∏–∫–ª–∞–¥–∏:
#   "üî¥ 20:08 –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –≤ –ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω."
#   "üü¢ 00:12 –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ –≤ –ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å."
#   –ú–æ–∂—É—Ç—å –±—É—Ç–∏: —Ç–∏—Ä–µ/–¥–æ–≤–≥–µ —Ç–∏—Ä–µ, —ñ–Ω—à—ñ —Ä–æ–∑–¥—ñ–ª–æ–≤—ñ, –∂–∏—Ä–Ω—ñ—Å—Ç—å, –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫, —Ç–æ—â–æ.
# ------------------------------------------------------------

# 1) –±–∞–∑–æ–≤–∏–π ‚Äì —è–∫ –±—É–ª–æ
RE_BASE = re.compile(
    r"(–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞\s+—Ç—Ä–∏–≤–æ–≥–∞|–≤—ñ–¥–±—ñ–π\s+—Ç—Ä–∏–≤–æ–≥–∏)\s+(?:–≤|—É)\s+([^\n\.#!]+)",
    re.IGNORECASE | re.UNICODE,
)

# 2) –¥–æ–ø—É—Å–∫–∞—î–º–æ —Ç–∏—Ä–µ/–¥–µ—Ñ—ñ—Å –º—ñ–∂ —Ñ—Ä–∞–∑–æ—é —ñ –Ω–∞–∑–≤–æ—é —Ä–µ–≥—ñ–æ–Ω—É
RE_WITH_DASH = re.compile(
    r"(–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞\s+—Ç—Ä–∏–≤–æ–≥–∞|–≤—ñ–¥–±—ñ–π\s+—Ç—Ä–∏–≤–æ–≥–∏)[^\n]*?(?:‚Äî|-|‚Äì)\s*([^\n\.#!]+)",
    re.IGNORECASE | re.UNICODE,
)

# 3) –¥—É–∂–µ –ª–æ—è–ª—å–Ω–∏–π: —à—É–∫–∞—î–º–æ —Ñ—Ä–∞–∑—É —ñ –¥–∞–ª—ñ –∞–±–æ ‚Äú–≤|—É <—Ä–µ–≥—ñ–æ–Ω>‚Äù –∞–±–æ –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º–æ —à–º–∞—Ç–æ–∫ –¥–æ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∞
RE_LOOSE = re.compile(
    r"(–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞\s+—Ç—Ä–∏–≤–æ–≥–∞|–≤—ñ–¥–±—ñ–π\s+—Ç—Ä–∏–≤–æ–≥–∏)(?:[^\n]*?(?:–≤|—É)\s+)?([^\n\.#!]+)",
    re.IGNORECASE | re.UNICODE,
)

# fallback –ø–æ —Ö–µ—à—Ç–µ–≥—É ‚Äì —ñ–Ω–∫–æ–ª–∏ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –∫–∞–Ω–∞–ª –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ —Å—Ç–∞–≤–∏—Ç—å
HASHTAG_MAP = {
    "#–±—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π_—Ä–∞–π–æ–Ω": "–±—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω",
    "#–∫–∏—ó–≤—Å—å–∫–∞_–æ–±–ª–∞—Å—Ç—å": "–∫–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
}

def _norm_district(d: str) -> str:
    d = (d or "").strip().lower()
    # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —Å–ª—É–∂–±–æ–≤—ñ ¬´–º. ¬ª, –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏, –∫—ñ–Ω—Ü–µ–≤—ñ –∫—Ä–∞–ø–∫–∏/–∫–æ–º–∏/–µ–º–æ–¥–∑—ñ
    d = d.replace("–º. ", "").strip()
    # –≤—ñ–¥—Ä—ñ–∂–µ–º–æ —Ç–∏–ø–æ–≤—ñ —Ö–≤–æ—Å—Ç–∏
    d = re.sub(r"[#\.\!\,]+$", "", d).strip()
    return d

def _is_region_hit(lower: str) -> bool:
    return any(k in lower for k in REGION_KEYWORDS)

def _is_rapid_hit(lower: str) -> bool:
    return any(k in lower for k in RAPID_THREATS)

def _guess_threat(lower: str):
    for w in THREAT_WORDS:
        if w in lower:
            return w
    return None

def _try_official_parse(lower: str):
    """
    –ü—Ä–æ–±—É—î–º–æ —Ç—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –∑ RE_*.
    –ü–æ–≤–µ—Ä—Ç–∞—î (typ, district_norm) –∞–±–æ None.
    """
    for rx in (RE_BASE, RE_WITH_DASH, RE_LOOSE):
        m = rx.search(lower)
        if not m:
            continue
        phrase = (m.group(1) or "").lower()
        raw_district = (m.group(2) or "").strip()
        district_norm = _norm_district(raw_district)

        if "–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞" in phrase:
            typ = "alarm"
        elif "–≤—ñ–¥–±—ñ–π" in phrase:
            typ = "all_clear"
        else:
            continue

        return typ, district_norm
    return None

def _try_hashtag_fallback(lower: str):
    """
    –Ø–∫—â–æ —Ä–µ–≥—É–ª—è—Ä–∫–∞ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞ ‚Äì —à—É–∫–∞—î–º–æ –æ—Ñ—ñ—Ü—ñ–π–Ω—ñ —Ö–µ—à—Ç–µ–≥–∏
    —ñ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –≤–≥–∞–¥–∞—Ç–∏ —Ç–∏–ø –∑ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤.
    """
    found = None
    for tag, norm in HASHTAG_MAP.items():
        if tag in lower:
            found = norm
            break
    if not found:
        return None

    if "–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞" in lower:
        typ = "alarm"
    elif "–≤—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏" in lower:
        typ = "all_clear"
    else:
        # —è–∫—â–æ —Ç–∏–ø–æ–≤–æ—ó —Ñ—Ä–∞–∑–∏ –Ω–µ–º–∞ ‚Äì –Ω–µ —Ä–∏–∑–∏–∫—É—î–º–æ
        return None
    return typ, found

def classify_message(text: str, url: str, source: str | None = None):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î:
      - –¥–ª—è –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ @air_alert_ua: dict –∑ type in {'alarm','all_clear'} –∞–±–æ None —è–∫—â–æ –Ω–µ –Ω–∞—à —Ä–µ–≥—ñ–æ–Ω;
      - –¥–ª—è —ñ–Ω—à–∏—Ö: dict –∑ type='info' + region_hit/rapid_hit + threat_type (—è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ).
    """
    if not text:
        return None

    lower = text.lower()

    # ---------- 1) –û–§–Ü–¶–Ü–ô–ù–ò–ô –ö–ê–ù–ê–õ ----------
    if source == "air_alert_ua":
        parsed = _try_official_parse(lower)
        if not parsed:
            # fallback –ø–æ —Ö–µ—à—Ç–µ–≥—É
            parsed = _try_hashtag_fallback(lower)

        if not parsed:
            # –∫–æ—Ä–∏—Å–Ω–∏–π –¥–µ–±–∞–≥ —É –∂—É—Ä–Ω–∞–ª–∞—Ö, —â–æ–± –±–∞—á–∏—Ç–∏, —â–æ —Å–∞–º–µ –Ω–µ –∑–∞–π—à–ª–æ
            print(f"[FILTER DEBUG] Official miss: {text[:140].replace(chr(10),' ')}")
            return None

        typ, district_norm = parsed

        # –ü—Ä–∞—Ü—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑ –Ω–∞—à–∏–º–∏ —Ä–µ–≥—ñ–æ–Ω–∞–º–∏
        if district_norm not in ALLOWED_DISTRICTS:
            print(f"[FILTER DEBUG] Official other district: '{district_norm}'")
            return None

        return {
            "district": district_norm,
            "text": text,
            "url": url,
            "id": hash(text + url),
            "type": typ,
        }

    # ---------- 2) –ù–ï–æ—Ñ—ñ—Ü—ñ–π–Ω—ñ –∫–∞–Ω–∞–ª–∏ ‚Üí INFO ----------
    region_hit = _is_region_hit(lower)
    rapid_hit = _is_rapid_hit(lower)
    threat = _guess_threat(lower)

    return {
        "district": None,
        "text": text,
        "url": url,
        "id": hash(text + url),
        "type": "info",
        "region_hit": region_hit,
        "rapid_hit": rapid_hit,
        "threat_type": threat,
        "source": source,
    }
