# utils/sender.py
import os
import aiohttp
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

async def send_alert_message(text: str, notify: bool = True, chat_id: str | None = None, markdown: bool = True):
    """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –Ø–∫—â–æ markdown=False ‚Äî —à–ª–µ–º–æ plain text (–±–µ–∑ parse_mode)."""
    target_chat_id = chat_id or CHANNEL_ID
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

    data = {
        "chat_id": target_chat_id,
        "text": text,
        "disable_notification": not notify,
    }
    if markdown:
        data["parse_mode"] = "Markdown"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=data, timeout=10) as response:
                if response.status != 200:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {await response.text()}")
                    return None
                payload = await response.json()
                print("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
                return payload["result"]["message_id"]
    except Exception as e:
        print(f"‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return None

async def send_start_message(start_time: datetime, chat_id: str):
    """–°—Ç–∞—Ä—Ç–æ–≤–µ —Å–ª—É–∂–±–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (Markdown –æ–∫)."""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    text = format_uptime_message(start_time)
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "Markdown",
        "disable_notification": True,
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=data, timeout=10) as response:
                if response.status != 200:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {await response.text()}")
                    return None
                return (await response.json())["result"]["message_id"]
    except Exception as e:
        print(f"‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return None

async def edit_message(message_id: int, start_time: datetime, chat_id: str):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ (Markdown –æ–∫)."""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/editMessageText"
    text = format_uptime_message(start_time)
    data = {
        "chat_id": chat_id,
        "message_id": message_id,
        "text": text,
        "parse_mode": "Markdown",
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=data, timeout=10) as response:
                if response.status != 200:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {await response.text()}")
    except Exception as e:
        print(f"‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

def format_uptime_message(start_time: datetime) -> str:
    delta = int((datetime.now() - start_time).total_seconds())
    hours = delta // 3600
    minutes = (delta % 3600) // 60
    start_str = start_time.strftime("%Y-%m-%d %H:%M:%S")
    return (
        f"üü¢ –ë–æ—Ç –ø—Ä–∞—Ü—é—î –±–µ–∑ –∑—É–ø–∏–Ω–æ–∫: {hours} –≥–æ–¥ {minutes} —Ö–≤\n"
        f"‚è± –ó–∞–ø—É—â–µ–Ω–æ: {start_str}\n"
        "–°—Ç–µ–∂—É –∑–∞ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏–º–∏ —Ç—Ä–∏–≤–æ–≥–∞–º–∏."
    )

async def send_alert_with_screenshot(caption: str, screenshot_path: str, chat_id: str | None = None, markdown: bool = True):
    """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ-—Å–∫—Ä—ñ–Ω—à–æ—Ç —ñ–∑ –ø—ñ–¥–ø–∏—Å–æ–º. –Ø–∫—â–æ markdown=False ‚Äî —à–ª–µ–º–æ –±–µ–∑ parse_mode."""
    target_chat_id = chat_id or CHANNEL_ID
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"

    try:
        async with aiohttp.ClientSession() as session:
            with open(screenshot_path, "rb") as image:
                data = aiohttp.FormData()
                data.add_field("chat_id", str(target_chat_id))
                data.add_field("photo", image)
                data.add_field("caption", caption)
                if markdown:
                    data.add_field("parse_mode", "Markdown")

                async with session.post(url, data=data, timeout=20) as response:
                    if response.status != 200:
                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞: {await response.text()}")
                    else:
                        print("‚úÖ –°–∫—Ä—ñ–Ω—à–æ—Ç —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
    except Exception as e:
        print(f"‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞: {e}")
