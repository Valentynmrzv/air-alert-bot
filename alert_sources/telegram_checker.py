import os
import asyncio
import time
import json
import re
from pathlib import Path
from datetime import datetime, timedelta, timezone

from telethon import TelegramClient, events
from telethon.errors import FloodWaitError
from telethon.sessions import StringSession
from dotenv import load_dotenv

from utils.filter import classify_message
from web import server  # live-—Å—Ç–∞—Ç—É—Å —Ç–∞ SSE

# =========================
# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É —à–ª—è—Ö—É
# =========================
BASE_DIR = Path(__file__).resolve().parents[1]
ENV_PATH = BASE_DIR / ".env"
load_dotenv(dotenv_path=ENV_PATH)

API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
STRING = (os.getenv("TELETHON_SESSION") or "").strip()

print(f"[ENV] .env at: {ENV_PATH}")
print(f"[ENV] TELETHON_SESSION loaded: {'YES' if STRING else 'NO'}")
print(f"[ENV] API_ID={API_ID} (hash present: {'YES' if API_HASH else 'NO'})")

client = TelegramClient(
    StringSession(STRING) if STRING else "session",
    API_ID,
    API_HASH,
    flood_sleep_threshold=120
)

message_queue = asyncio.Queue()
catch_up_messages = []

# =========================
# –ö–∞–Ω–∞–ª–∏
# =========================
CHANNELS_PATH = BASE_DIR / "alert_sources" / "channels.json"
with open(CHANNELS_PATH, "r", encoding="utf-8") as f:
    monitored_channels = json.load(f)
print(f"[CFG] Loaded {len(monitored_channels)} channels from {CHANNELS_PATH}")

# üîí ¬´—Ç—Ä–∏–≤–æ–≥–∞/–≤—ñ–¥–±—ñ–π¬ª –¥–æ–≤—ñ—Ä—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–º—É
OFFICIAL_ALARM_SOURCES = {"air_alert_ua"}

# –ê–Ω—Ç–∏—Å–ø–∞–º
_RECENT_SIGS = set()
_MAX_SIGS = 500
# ‚è±Ô∏è –¢—Ä–æ—Ç–ª—ñ–Ω–≥ –Ω–µ–æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ –ø—ñ–¥ —á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏
_THROTTLE_SECONDS = 10.0
_last_handled_at: dict[str, float] = {}

# =========================
# –ö–ª—é—á—ñ –¥–ª—è –ø—Ä–µ—Ñ—ñ–ª—å—Ç—Ä–∞ –ø—ñ–¥ —á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏
# =========================
ALARM_PHRASES = [
    "–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞", "–≤—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏",
    "–≤–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞", "–æ—Ç–±–æ–π —Ç—Ä–µ–≤–æ–≥–∏",
]

THREAT_KEYWORDS = [
    # –µ–º–æ–¥–∑—ñ
    "üõµ", "üöÄ", "üí•", "‚úàÔ∏è", "üí£", "üõ©Ô∏è", "üéØ", "üß®", "üö®", "üî•",
    # –ë–ü–õ–ê / ¬´–º–æ–ø–µ–¥–∏¬ª
    "—à–∞—Ö–µ–¥", "—à–∞—Ö–µ–¥–∏", "shahed", "—à–∞hed", "–≥–µ—Äa–Ω—å", "–≥–µ—Ä–∞–Ω—å", "–≥–µ—Äa–Ω—å-2", "–≥–µ—Ä–∞–Ω—å-2",
    "–¥—Ä–æ–Ω", "–¥—Ä–æ–Ω–∏", "–±–ø–ª–∞", "–±–µ–∑–ø—ñ–ª–æ—Ç–Ω–∏–∫", "–±–µ–∑–ø—ñ–ª–æ—Ç–Ω–∏–∫–∏",
    "–º–æ–ø–µ–¥", "–º–æ–ø–µ–¥–∏", "–º–∞–≤—ñ–∫", "mavic", "–ª–∞–Ω—Ü–µ—Ç", "lancet",
    # —Ä–∞–∫–µ—Ç–∏ / —Ç–∏–ø–∏
    "—Ä–∞–∫–µ—Ç–∞", "—Ä–∞–∫–µ—Ç–∏", "—Ä–∞–∫–µ—Ç–Ω", "–∫—Ä–∏–ª–∞", "–∫—Ä–∏–ª–∞—Ç", "–∫—Ä—ã–ª–∞—Ç",
    "—ñ—Å–∫–∞–Ω–¥–µ—Ä", "–∏—Å–∫–∞–Ω–¥–µ—Ä", "–∫–∏–Ω–∂–∞–ª", "–∫–∞–ª—ñ–±—Ä", "–∫–∞–ª–∏–±—Ä",
    "—Ö-101", "—Ö101", "x-101", "x101", "—Ö–∞-101", "—Ö–∞101",
    "—Ö-22", "—Ö22", "x-22", "x22",
    "—Ö-47", "—Ö47", "x-47", "x47",
    # —ñ–Ω—à—ñ —Ç—Ä–∏–≥–µ—Ä–∏
    "–ø—É—Å–∫", "–ø—É—Å–∫–∏", "–∑–∞–ø—É—Å–∫", "–∑–∞–ø—É—Å–∫–∏",
    "–∑–ª—ñ—Ç", "–∑–ª—å–æ—Ç", "–≤–∑–ª–µ—Ç", "–∞–≤—ñ–∞—Ü—ñ—è", "–∞–≤–∏–∞—Ü–∏—è",
    "—É–¥–∞—Ä", "—É–¥–∞—Ä–∏", "–æ–±—Å—Ç—Ä—ñ–ª", "–æ–±—Å—Ç—Ä—ñ–ª–∏", "–æ–±—Å—Ç—Ä–µ–ª", "–æ–±—Å—Ç—Ä–µ–ª—ã",
    "–≤–∏–±—É—Ö", "–≤–∏–±—É—Ö–∏", "–≤–∑—Ä—ã–≤", "–≤–∑—Ä—ã–≤—ã",
    "–ø—Ä–∏–ª—ñ—Ç", "–ø—Ä–∏–ª—å–æ—Ç", "–ø—Ä–∏–ª—å–æ—Ç–∏", "–ø—Ä–∏–ª–µ—Ç", "–ø—Ä–∏–ª–µ—Ç—ã",
    "—Å–∏—Ä–µ–Ω–∞", "–Ω–µ–±–µ–∑–ø–µ–∫–∞", "–∑–∞–≥—Ä–æ–∑–∞", "–æ–ø–∞—Å–Ω–æ—Å—Ç", "—É–≥—Ä–æ–∑–∞",
]

REGION_KEYWORDS = [
    # –ö–∏—ó–≤/–ö–∏—ó–≤—â–∏–Ω–∞
    "–∫–∏—ó–≤", "–∫–∏—ó–≤—â–∏–Ω–∞", "–∫–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "—Å—Ç–æ–ª–∏—Ü—è",
    "–∫–∏–µ–≤", "–∫–∏–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "—Å—Ç–æ–ª–∏—Ü–∞",
    # –ë—Ä–æ–≤–∞—Ä–∏/—Ä–∞–π–æ–Ω
    "–±—Ä–æ–≤–∞—Ä", "–±—Ä–æ–≤–∞—Ä–∏", "–±—Ä–æ–≤–∞—Ä—Å—å–∫", "–±—Ä–æ–≤–∞—Ä—Å–∫–∏–π", "–±—Ä–æ–≤–∞—Ä—Å–∫–æ–≥–æ",
    # –Ω–∞—Å–µ–ª–µ–Ω—ñ –ø—É–Ω–∫—Ç–∏ (UA/RU; —Å—Ç–µ–º–∏)
    "–∫–Ω—è–∂–∏—á", "—Ç—Ä–µ–±—É—Ö", "–∫–∞–ª–∏–Ω—ñ–≤–∫",
    "–≤–µ–ª–∏–∫–∞ –¥–∏–º–µ—Ä", "–≤. –¥–∏–º–µ—Ä", "–º–∞–ª–∞ –¥–∏–º–µ—Ä", "–º. –¥–∏–º–µ—Ä",
    "–±–æ–≥–¥–∞–Ω—ñ–≤–∫", "–±–æ–≥–¥–∞–Ω–æ–≤–∫", "–∫—Ä–∞—Å–∏–ª—ñ–≤–∫", "–∫—Ä–∞—Å–∏–ª–æ–≤–∫",
    "–ø–æ–≥—Ä–µ–±–∏", "–∑–∞–∑–∏–º", "–ª—ñ—Ç–∫–∏", "–ª–∏—Ç–∫–∏", "–ø—É—Ö—ñ–≤–∫", "–ø—É—Ö–æ–≤–∫",
    "—Ä–æ–∂–Ω", "—Å–≤—ñ—Ç–∏–ª—å–Ω", "—Å–≤–µ—Ç–∏–ª—å–Ω", "—Å–µ–º–∏–ø–æ–ª–∫",
    "–∫–≤—ñ—Ç–Ω–µ–≤", "–∫–≤–∏—Ç–Ω–µ–≤", "–ø–µ—Ä–µ–º–æ–≥", "–≥–æ–≥–æ–ª", "–∫–∞–ª–∏—Ç–∞",
    # –¥–æ–≤–∫–æ–ª–∞ –ö–∏—î–≤–∞
    "–±–æ—Ä–∏—Å–ø—ñ–ª", "–±–æ—Ä–∏—Å–ø–æ–ª—å", "—Ç—Ä–æ—î—â–∏–Ω", "—Ç—Ä–æ–µ—â–∏–Ω",
    "–ª—ñ—Å–æ–≤", "–ª—ñ—Å–æ–≤–∏–π –º–∞—Å–∏–≤", "–ª–µ—Å–Ω–æ–π", "–ª–µ—Å–Ω–æ–π –º–∞—Å—Å–∏–≤",
    "–¥–∞—Ä–Ω–∏—Ü", "–≤–∏—à–≥–æ—Ä–æ–¥", "–≤—ã—à–≥–æ—Ä–æ–¥",
    "–æ–±—É—Ö", "—ñ—Ä–ø—ñ–Ω", "–∏—Ä–ø–µ–Ω—å",
    "–±—É—á–∞", "–≥–æ—Å—Ç–æ–º–µ–ª", "–≥–æ—Å—Ç–æ–º—ñ–ª—å",
    "–≤–∏—à–Ω–µ–≤", "–≤–∞—Å–∏–ª—å–∫", "–±–µ—Ä–µ–∑–∞–Ω", "–±–∞—Ä–∏—à—ñ–≤–∫", "–±–∞—Ä—ã—à–µ–≤–∫",
]

BRO_REVISOR_BONUS = {"–Ω–∞ –Ω–∞—Å", "–Ω–µ –ª–µ—Ç–∏—Ç—å", "–ª–µ—Ç–∏—Ç—å", "–Ω–µ —Ñ—ñ–∫—Å—É—î—Ç—å—Å—è"}

def _passes_prefilter_when_active(lower: str, username: str | None) -> bool:
    if any(p in lower for p in ALARM_PHRASES):
        return True
    if any(k in lower for k in THREAT_KEYWORDS):
        return True
    if any(k in lower for k in REGION_KEYWORDS):
        return True
    if username == "bro_revisor" and any(k in lower for k in BRO_REVISOR_BONUS):
        return True
    return False

# -------------------------
# –ü–∞—Ä—Å–µ—Ä –¥–ª—è –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É @air_alert_ua
# -------------------------
_official_alarm_re = re.compile(
    r"(–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞\s+—Ç—Ä–∏–≤–æ–≥–∞|–≤–æ–∑–¥—É—à–Ω–∞—è\s+—Ç—Ä–µ–≤–æ–≥–∞|–≤—ñ–¥–±—ñ–π\s+—Ç—Ä–∏–≤–æ–≥–∏|–æ—Ç–±–æ–π\s+—Ç—Ä–µ–≤–æ–≥–∏)\s+–≤\s+([^\n\.#]+)",
    re.IGNORECASE
)

def _parse_official_airalert(text: str, url: str):
    """
    –ü–∞—Ä—Å–∏–º–æ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–∏–ø—É:
    'üî¥ 23:35 –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –≤ –ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω ...'
    'üü¢ 21:29 –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ –≤ –ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å ...'
    –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ dict –∞–±–æ None.
    """
    m = _official_alarm_re.search(text)
    if not m:
        return None

    kind = m.group(1).lower()
    district_raw = m.group(2).strip()

    if "–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞" in kind or "—Ç—Ä–µ–≤–æ–≥–∞" in kind and "–æ—Ç–±–æ–π" not in kind:
        t = "alarm"
    elif "–≤—ñ–¥–±—ñ–π" in kind or "–æ—Ç–±–æ–π" in kind:
        t = "all_clear"
    else:
        return None

    # –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –∫—ñ–ª—å–∫–∞ —Ç–∏–ø–æ–≤–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏ ‚Äî —Ä–æ–∑—à–∏—Ä—é–π)
    district = district_raw
    # —É –Ω–∞—Å –¥–∞–ª—ñ –≤—Å–µ –æ–¥–Ω–æ —Ñ—ñ–ª—å—Ç—Ä —É main.py –∑–∞–ª–∏—à–∞—î –ª–∏—à–µ —Ü—ñ 2:
    # "–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å"
    return {
        "type": t,
        "district": district,
        "text": text,
        "url": url,
        "id": hash(text + url),
    }

@client.on(events.NewMessage(chats=monitored_channels))
async def handle_all_messages(event):
    username = getattr(event.chat, 'username', None)
    if not username:
        return

    text = event.message.text or ""
    lower = text.lower()
    url = f"https://t.me/{username}/{event.message.id}"

    alert_active = bool(server.status.get("alert_active"))

    # 1) –û—Ñ—ñ—Ü—ñ–π–Ω–∏–π –∫–∞–Ω–∞–ª ‚Äî –ø–∞—Ä—Å–∏–º–æ –æ–∫—Ä–µ–º–æ —ñ –æ–¥—Ä–∞–∑—É —à–ª–µ–º–æ —É pipeline
    if username in OFFICIAL_ALARM_SOURCES:
        classified = _parse_official_airalert(text, url)
        print(f"[TELEGRAM CHECKER] @{username} (official) ‚Üí {classified}")
        if not classified:
            return
        # –æ–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±-—Å—Ç–∞—Ç—É—Å
        server.status["last_messages"].append({
            "text": text,
            "username": username,
            "url": url,
            "date": event.message.date.isoformat(),
        })
        if len(server.status["last_messages"]) > 50:
            server.status["last_messages"] = server.status["last_messages"][-50:]
        classified["date"] = event.message.date.replace(tzinfo=timezone.utc)
        await message_queue.put(classified)
        await server.push_update()
        return

    # 2) –ù–µ–æ—Ñ—ñ—Ü—ñ–π–Ω—ñ –∫–∞–Ω–∞–ª–∏: —á–∏—Ç–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥ —á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏
    if not alert_active:
        return

    # –¢—Ä–æ—Ç–ª—ñ–Ω–≥/–ø—Ä–µ—Ñ—ñ–ª—å—Ç—Ä
    now = time.monotonic()
    last = _last_handled_at.get(username, 0.0)
    if (now - last) < _THROTTLE_SECONDS:
        return
    _last_handled_at[username] = now

    if not _passes_prefilter_when_active(lower, username):
        return

    # Debounce
    sig = hash((username, text))
    if sig in _RECENT_SIGS:
        return
    _RECENT_SIGS.add(sig)
    if len(_RECENT_SIGS) > _MAX_SIGS:
        _RECENT_SIGS.pop()

    # –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –¥–ª—è –Ω–µ–æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö
    classified = classify_message(text, url, source=username)
    print(f"[TELEGRAM CHECKER] @{username} ‚Üí {classified}")
    if not classified:
        return

    # –ë–µ–∑–ø–µ–∫–∞: –±—É–¥—å-—è–∫—ñ alarm/all_clear –Ω–µ –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ –∑–Ω–∏–∂—É—î–º–æ –¥–æ info
    if classified["type"] in ("alarm", "all_clear"):
        classified["type"] = "info"

    # –≤–µ–±-—Å—Ç–∞—Ç—É—Å
    server.status["last_messages"].append({
        "text": text,
        "username": username,
        "url": url,
        "date": event.message.date.isoformat(),
    })
    if len(server.status["last_messages"]) > 50:
        server.status["last_messages"] = server.status["last_messages"][-50:]

    classified["date"] = event.message.date.replace(tzinfo=timezone.utc)
    await message_queue.put(classified)
    await server.push_update()

async def start_monitoring():
    await client.start()
    await client.run_until_disconnected()

async def check_telegram_channels():
    if not message_queue.empty():
        return await message_queue.get()
    return None

# catch-up –Ω–µ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –∑ main.py (–µ–∫–æ–Ω–æ–º—ñ—è –ª—ñ–º—ñ—Ç—ñ–≤)
async def fetch_last_messages(minutes: int):
    if not await client.is_user_authorized():
        print("‚ùó –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –¥–ª—è –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
        return

    monitor_start_time = datetime.now(timezone.utc) - timedelta(minutes=minutes)
    print(f"üîÑ –ü—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ {monitor_start_time.isoformat()}")

    for username in monitored_channels:
        try:
            entity = await client.get_entity(username)
            try:
                messages = await client.get_messages(entity, limit=50)
            except FloodWaitError as e:
                print(f"‚è≥ Flood wait {e.seconds}s –Ω–∞ {username}")
                await asyncio.sleep(e.seconds)
                continue

            for msg in reversed(messages):
                if msg.date.replace(tzinfo=timezone.utc) >= monitor_start_time:
                    cl = None
                    if username in OFFICIAL_ALARM_SOURCES:
                        cl = _parse_official_airalert(msg.text or "", f"https://t.me/{username}/{msg.id}")
                    else:
                        cl = classify_message(msg.text or "", f"https://t.me/{username}/{msg.id}", source=username)
                        if cl and cl["type"] in ("alarm", "all_clear"):
                            cl["type"] = "info"
                    if cl:
                        cl["date"] = msg.date.replace(tzinfo=timezone.utc)
                        catch_up_messages.append(cl)
            await asyncio.sleep(0.3)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ {username}: {e}")

async def get_catch_up_messages():
    return catch_up_messages
