# alert_sources/telegram_checker.py
import os
import asyncio
import time
from datetime import datetime, timedelta, timezone
from telethon import TelegramClient, events
from telethon.errors import FloodWaitError
from dotenv import load_dotenv
from utils.filter import classify_message
import json
from web import server  # –¥–ª—è live-—Å—Ç–∞—Ç—É—Å—É —Ç–∞ SSE

load_dotenv()

API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")

# ‚úÖ –∞–≤—Ç–æ-—Å–æ–Ω –Ω–∞ FloodWait, —â–æ–± –∞–∫–∞—É–Ω—Ç –Ω–µ ¬´–≤–∏–∫–∏–¥–∞–ª–æ¬ª
client = TelegramClient(
    "session",
    API_ID,
    API_HASH,
    flood_sleep_threshold=120
)

message_queue = asyncio.Queue()
catch_up_messages = []

with open("alert_sources/channels.json", "r", encoding="utf-8") as f:
    monitored_channels = json.load(f)

# üîí ¬´—Ç—Ä–∏–≤–æ–≥–∞/–≤—ñ–¥–±—ñ–π¬ª –¥–æ–≤—ñ—Ä—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–º—É
OFFICIAL_ALARM_SOURCES = {"air_alert_ua"}

# Debounce –Ω–∞ –æ–¥–Ω–∞–∫–æ–≤—ñ —Ç–µ–∫—Å—Ç–∏/—Ä–µ–ø–æ—Å—Ç–∏ (–≥–ª–æ–±–∞–ª—å–Ω–æ)
_RECENT_SIGS = set()
_MAX_SIGS = 500

# ‚è±Ô∏è –¢—Ä–æ—Ç–ª—ñ–Ω–≥ –ø–æ –∫–∞–Ω–∞–ª–∞—Ö (–æ–∫—Ä—ñ–º –æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö): –Ω–µ —á–∞—Å—Ç—ñ—à–µ –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
_THROTTLE_SECONDS = 10.0
_last_handled_at: dict[str, float] = {}  # username -> monotonic ts

# =========================
# –†–û–ó–®–ò–†–ï–ù–Ü –ö–õ–Æ–ß–Ü –î–õ–Ø –ü–†–ï–§–Ü–õ–¨–¢–†–ê
# =========================

# 1) –ó–∞–≥—Ä–æ–∑–∏ (UA + RU + –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–º—ñ–Ω–∫—ñ–≤/–º–Ω–æ–∂–∏–Ω–∏; –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫ –ø—ñ–¥—Ä—è–¥–æ–∫ —É lower)
THREAT_KEYWORDS = [
    # –±–∞–∑–æ–≤—ñ
    "—à–∞—Ö–µ–¥", "—à–∞—Ö–µ–¥–∏", "—à–∞hed",  # —ñ–Ω–∫–æ–ª–∏ ¬´shahed¬ª –ª–∞—Ç–∏–Ω–∏—Ü–µ—é
    "–¥—Ä–æ–Ω", "–¥—Ä–æ–Ω–∏", "–±–ø–ª–∞", "–±–µ–∑–ø—ñ–ª–æ—Ç–Ω–∏–∫", "–±–µ–∑–ø—ñ–ª–æ—Ç–Ω–∏–∫–∏",
    "—Ä–∞–∫–µ—Ç–∞", "—Ä–∞–∫–µ—Ç–∏", "—Ä–∞–∫–µ—Ç–Ω–∏–π",
    "–±–∞–ª—ñ—Å—Ç–∏–∫–∞", "–±–∞–ª—ñ—Å—Ç–∏—á–Ω",  # –ø–æ–∫—Ä–∏–≤–∞—î –±–∞–ª—ñ—Å—Ç–∏—á–Ω–∞/—ñ/—ñ —Ç.–¥.
    "—ñ—Å–∫–∞–Ω–¥–µ—Ä", "–∫–∏–Ω–∂–∞–ª", "–∫–∞–ª—ñ–±—Ä",
    "–ø—É—Å–∫", "–ø—É—Å–∫–∏", "–∑–∞–ø—É—Å–∫", "–∑–∞–ø—É—Å–∫–∏",
    "–∑–ª—ñ—Ç", "–∑–ª—å–æ—Ç", "–∞–≤—ñ–∞—Ü—ñ—è",
    "—É–¥–∞—Ä", "—É–¥–∞—Ä–∏", "–æ–±—Å—Ç—Ä—ñ–ª", "–æ–±—Å—Ç—Ä—ñ–ª–∏",
    "–≤–∏–±—É—Ö", "–≤–∏–±—É—Ö–∏", "–ø—Ä–∏–ª—ñ—Ç", "–ø—Ä–∏–ª—å–æ—Ç", "–ø—Ä–∏–ª—å–æ—Ç–∏",
    "—Å–∏—Ä–µ–Ω–∞", "–Ω–µ–±–µ–∑–ø–µ–∫–∞", "–∑–∞–≥—Ä–æ–∑–∞",

    # RU-–≤–∞—Ä—ñ–∞–Ω—Ç–∏
    "—à–∞—Ö–µ–¥–æ–≤", "–¥—Ä–æ–Ω–æ–≤", "–±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫", "–±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–∏",
    "—Ä–∞–∫–µ—Ç–∞", "—Ä–∞–∫–µ—Ç—ã", "–±–∞–ª–ª–∏—Å—Ç–∏–∫", "–∏—Å–∫–∞–Ω–¥–µ—Ä", "–∫–∏–Ω–∂–∞–ª", "–∫–∞–ª–∏–±—Ä",
    "–ø—É—Å–∫", "–ø—É—Å–∫–∏", "–∑–∞–ø—É—Å–∫", "–∑–∞–ø—É—Å–∫–∏",
    "–≤–∑–ª–µ—Ç", "–∞–≤–∏–∞—Ü–∏—è",
    "—É–¥–∞—Ä", "—É–¥–∞—Ä—ã", "–æ–±—Å—Ç—Ä–µ–ª", "–æ–±—Å—Ç—Ä–µ–ª—ã",
    "–≤–∑—Ä—ã–≤", "–≤–∑—Ä—ã–≤—ã", "–ø—Ä–∏–ª–µ—Ç", "–ø—Ä–∏–ª–µ—Ç—ã",
    "—Å–∏—Ä–µ–Ω–∞", "–æ–ø–∞—Å–Ω–æ—Å—Ç", "—É–≥—Ä–æ–∑–∞",
]

# 2) –†–µ–≥—ñ–æ–Ω (–ö–∏—ó–≤/–ö–∏—ó–≤—â–∏–Ω–∞ + –ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω + –¥–æ–≤–∫–æ–ª–∏—à–Ω—ñ –Ω–∞—Å–µ–ª–µ–Ω—ñ –ø—É–Ω–∫—Ç–∏)
REGION_KEYWORDS = [
    # –ö–∏—ó–≤—â–∏–Ω–∞ –∑–∞–≥–∞–ª–æ–º
    "–∫–∏—ó–≤", "–∫–∏—ó–≤—â–∏–Ω–∞", "–∫–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "—Å—Ç–æ–ª–∏—Ü—è",
    "–∫–∏–µ–≤", "–∫–∏–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "—Å—Ç–æ–ª–∏—Ü–∞",

    # –ë—Ä–æ–≤–∞—Ä–∏/—Ä–∞–π–æ–Ω
    "–±—Ä–æ–≤–∞—Ä", "–±—Ä–æ–≤–∞—Ä–∏", "–±—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π", "–±—Ä–æ–≤–∞—Ä—Å–∫–æ–≥–æ", "–±—Ä–æ–≤–∞—Ä—Å–∫–∏–π",

    # –ù–∞—Å–µ–ª–µ–Ω—ñ –ø—É–Ω–∫—Ç–∏ –ë—Ä–æ–≤–∞—Ä—Å—å–∫–æ–≥–æ —Ä–∞–π–æ–Ω—É (—Ç–∞ –±–ª–∏–∑—å–∫—ñ –¥–æ –±—Ä–æ–≤–∞—Ä—ñ–≤)
    "–∫–Ω—è–∂–∏—á—ñ", "–∫–Ω—è–∂–∏—á–∏",
    "—Ç—Ä–µ–±—É—Ö—ñ–≤", "—Ç—Ä–µ–±—É—Ö–æ–≤",
    "–∫–∞–ª–∏–Ω—ñ–≤–∫–∞", "–∫–∞–ª–∏–Ω–æ–≤–∫–∞",
    "–≤–µ–ª–∏–∫–∞ –¥–∏–º–µ—Ä–∫–∞", "–≤–µ–ª–∏–∫a –¥–∏–º–µ—Ä–∫–∞", "–≤. –¥–∏–º–µ—Ä–∫–∞", "–≤–µ–ª–∏–∫–∞ –¥–∏–º–µ—Ä–∫",
    "–º–∞–ª–∞ –¥–∏–º–µ—Ä–∫–∞", "–º. –¥–∏–º–µ—Ä–∫–∞", "–º–∞–ª–∞ –¥–∏–º–µ—Ä–∫",
    "–±–æ–≥–¥–∞–Ω—ñ–≤–∫–∞", "–±–æ–≥–¥–∞–Ω–æ–≤–∫–∞",
    "–∫—Ä–∞—Å–∏–ª—ñ–≤–∫–∞", "–∫—Ä–∞—Å–∏–ª–æ–≤–∫–∞",
    "–ø–æ–≥—Ä–µ–±–∏",
    "–∑–∞–∑–∏–º'—è", "–∑–∞–∑–∏–º—å–µ", "–∑–∞–∑–∏–º—è",
    "–ª—ñ—Ç–∫–∏", "–ª–∏—Ç–∫–∏",
    "—Ä–æ–∂–Ω–∏",
    "—Å–≤—ñ—Ç–∏–ª—å–Ω—è", "—Å–≤–µ—Ç–∏–ª—å–Ω—è",
    "—Å–µ–º–∏–ø–æ–ª–∫–∏",
    "–∫–≤—ñ—Ç–Ω–µ–≤–µ", "–∫–≤–∏—Ç–Ω–µ–≤–æ–µ",
    "–ø–µ—Ä–µ–º–æ–≥–∞", "–ø–µ—Ä–µ–º–æ–≥–∞ (–±—Ä)",  # —ñ–Ω–∫–æ–ª–∏ –¥–æ–¥–∞—é—Ç—å —É—Ç–æ—á–Ω–µ–Ω–Ω—è
    "–≥–æ–≥–æ–ª—ñ–≤", "–≥–æ–≥–æ–ª–µ–≤",
    "–∫–∞–ª–∏ÃÅ—Ç–∞", "–∫–∞–ª–∏—Ç–∞",

    # –Ü–Ω—à—ñ ¬´—Å—É—Å—ñ–¥–Ω—ñ¬ª/—á–∞—Å—Ç–æ –∑–≥–∞–¥—É–≤–∞–Ω—ñ —Ç–æ—á–∫–∏ –¥–æ–≤–∫–æ–ª–∞ –ö–∏—î–≤–∞
    "–±–æ—Ä–∏—Å–ø—ñ–ª—å", "–±–æ—Ä–∏—Å–ø–æ–ª—å",
    "—Ç—Ä–æ—î—â–∏–Ω–∞", "—Ç—Ä–æ–µ—â–∏–Ω–∞",
    "–ª—ñ—Å–æ–≤–∏–π", "–ª—ñ—Å–æ–≤–∏–π –º–∞—Å–∏–≤", "–ª–µ—Å–Ω–æ–π", "–ª–µ—Å–Ω–æ–π –º–∞—Å—Å–∏–≤",
    "–¥–∞—Ä–Ω–∏—Ü—è", "–¥–∞—Ä–Ω–∏—Ü–∞",
    "–≤–∏—à–≥–æ—Ä–æ–¥", "–≤—ã—à–≥–æ—Ä–æ–¥",
    "–æ–±—É—Ö—ñ–≤", "–æ–±—É—Ö–æ–≤",
    "—ñ—Ä–ø—ñ–Ω—å", "—ñ—Ä–ø—ñ–Ω", "–∏—Ä–ø–µ–Ω—å",
    "–±—É—á–∞",
    "–≥–æ—Å—Ç–æ–º–µ–ª—å", "–≥–æ—Å—Ç–æ–º—ñ–ª—å",
    "–≤–∏—à–Ω–µ–≤–µ", "–≤–∏—à–Ω–µ–≤–æ–µ",
    "–≤–∞—Å–∏–ª—å–∫—ñ–≤", "–≤–∞—Å–∏–ª—å–∫–æ–≤",
    "–±–µ—Ä–µ–∑–∞–Ω—å", "–±–∞—Ä–∏—à—ñ–≤–∫–∞", "–±–∞—Ä—ã—à–µ–≤–∫–∞",
]

# –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ñ —Ñ—Ä–∞–∑–∏ –ø—Ä–æ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω —Ç—Ä–∏–≤–æ–≥–∏
ALARM_PHRASES = ["–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞", "–≤—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏", "–≤–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞", "–æ—Ç–±–æ–π —Ç—Ä–µ–≤–æ–≥–∏"]


def _passes_prefilter(lower: str) -> bool:
    """–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ:
       - —î —Ñ—Ä–∞–∑–∏ –ø—Ä–æ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω (ALARM_PHRASES), –∞–±–æ
       - (—î —Ö–æ—á –æ–¥–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞ –∑ THREAT_KEYWORDS) –Ü (—î —Ö–æ—á –æ–¥–∏–Ω —Ç–æ–ø–æ–Ω—ñ–º –∑ REGION_KEYWORDS).
    """
    if any(p in lower for p in ALARM_PHRASES):
        return True
    has_threat = any(k in lower for k in THREAT_KEYWORDS)
    has_region = any(k in lower for k in REGION_KEYWORDS)
    return has_threat and has_region


@client.on(events.NewMessage(chats=monitored_channels))
async def handle_all_messages(event):
    username = getattr(event.chat, 'username', None)
    if not username:
        return

    text = event.message.text or ""
    lower = text.lower()
    url = f"https://t.me/{username}/{event.message.id}"

    # ‚è±Ô∏è –ü–µ—Ä-–∫–∞–Ω–∞–ª—å–Ω–∏–π —Ç—Ä–æ—Ç–ª—ñ–Ω–≥ (–∫—Ä—ñ–º –æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö)
    if username not in OFFICIAL_ALARM_SOURCES:
        now = time.monotonic()
        last = _last_handled_at.get(username, 0.0)
        if (now - last) < _THROTTLE_SECONDS:
            return
        _last_handled_at[username] = now

    # üîï –†–û–ó–®–ò–†–ï–ù–ò–ô –ì–†–£–ë–ò–ô PREFILTER
    if not _passes_prefilter(lower):
        return

    # Debounce –Ω–∞ –æ–¥–Ω–∞–∫–æ–≤—ñ —Ç–µ–∫—Å—Ç–∏/—Ä–µ–ø–æ—Å—Ç–∏
    sig = hash((username, text))
    if sig in _RECENT_SIGS:
        return
    _RECENT_SIGS.add(sig)
    if len(_RECENT_SIGS) > _MAX_SIGS:
        # –≤–∏–¥–∞–ª—è—î–º–æ –¥–æ–≤—ñ–ª—å–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç, —â–æ–± –Ω–µ —Ä–æ—Å—Ç–∏ –±–µ–∑–º–µ–∂–Ω–æ
        _RECENT_SIGS.pop()

    # 1) –°–ø–æ—á–∞—Ç–∫—É –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è (–ª–æ–≥ ‚Äî —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ)
    classified = classify_message(text, url)
    # –î–ª—è –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ –≤ –ª–æ–≥–∞—Ö:
    print(f"[TELEGRAM CHECKER] @{username} ‚Üí {classified}")

    if not classified:
        return

    # üîí ¬´—Ç—Ä–∏–≤–æ–≥–∞/–≤—ñ–¥–±—ñ–π¬ª –ø—Ä–∏–π–º–∞—î–º–æ –ª–∏—à–µ –≤—ñ–¥ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ
    if classified["type"] in ("alarm", "all_clear") and username not in OFFICIAL_ALARM_SOURCES:
        classified["type"] = "info"

    # 2) –û–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±-—Å—Ç–∞—Ç—É—Å (–∫–æ—Ä–æ—Ç–∫–∏–π –±—É—Ñ–µ—Ä)
    server.status["last_messages"].append({
        "text": text,
        "username": username,
        "url": url,
        "date": event.message.date.isoformat(),
    })
    if len(server.status["last_messages"]) > 50:
        server.status["last_messages"] = server.status["last_messages"][-50:]

    # 3) –ö–ª–∞–¥–µ–º–æ —É —á–µ—Ä–≥—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É
    classified["date"] = event.message.date.replace(tzinfo=timezone.utc)
    await message_queue.put(classified)

    # Live-–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —É –≤–µ–±
    await server.push_update()


async def start_monitoring():
    await client.start()
    await client.run_until_disconnected()


async def check_telegram_channels():
    if not message_queue.empty():
        return await message_queue.get()
    return None


# ‚ö†Ô∏è catch-up –∑–∞–ª–∏—à–µ–Ω–æ, –∞–ª–µ –∫—Ä–∞—â–µ –ù–ï –í–ò–ö–õ–ò–ö–ê–¢–ò –π–æ–≥–æ –∑ main.py, —â–æ–± –Ω–µ –ø–ª–æ–¥–∏—Ç–∏ API-–∑–∞–ø–∏—Ç–∏
async def fetch_last_messages(minutes: int):
    if not await client.is_user_authorized():
        print("‚ùó –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –¥–ª—è –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
        return

    monitor_start_time = datetime.now(timezone.utc) - timedelta(minutes=minutes)
    print(f"üîÑ –ü—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ {monitor_start_time.isoformat()}")

    for username in monitored_channels:
        try:
            entity = await client.get_entity(username)
            try:
                messages = await client.get_messages(entity, limit=50)
            except FloodWaitError as e:
                print(f"‚è≥ Flood wait {e.seconds}s –Ω–∞ {username}")
                await asyncio.sleep(e.seconds)
                continue

            for msg in reversed(messages):
                if msg.date.replace(tzinfo=timezone.utc) >= monitor_start_time:
                    classified = classify_message(msg.text or "", f"https://t.me/{username}/{msg.id}")
                    if classified:
                        if classified["type"] in ("alarm", "all_clear") and username not in OFFICIAL_ALARM_SOURCES:
                            classified["type"] = "info"
                        classified["date"] = msg.date.replace(tzinfo=timezone.utc)
                        catch_up_messages.append(classified)
            await asyncio.sleep(0.3)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ {username}: {e}")


async def get_catch_up_messages():
    return catch_up_messages
