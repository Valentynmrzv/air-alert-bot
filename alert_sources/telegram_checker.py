import os
import json
import asyncio
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError, FloodWaitError
from dotenv import load_dotenv
from alert_sources.classifier import classify_message

load_dotenv()

api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
phone = os.getenv("TELEGRAM_PHONE")

client = TelegramClient('session', api_id, api_hash)
message_queue = asyncio.Queue()

with open("alert_sources/channels.json", "r", encoding="utf-8") as f:
    monitored_channels = set(json.load(f))

@client.on(events.NewMessage())
async def handler(event):
    sender = await event.get_sender()
    if hasattr(sender, 'username') and sender.username in monitored_channels:
        text = event.raw_text
        url = f"https://t.me/{sender.username}/{event.id}"
        classified = classify_message(text, url)

        if classified:
            classified["id"] = event.id
            await message_queue.put(classified)

async def start_monitoring():
    await client.connect()
    if not await client.is_user_authorized():
        print("‚ùó –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –≤—Ä—É—á–Ω—É –¥–ª—è –ø–µ—Ä–≤–∏–Ω–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.")
        return
    print("üü¢ Telethon –∑–∞–ø—É—â–µ–Ω–æ —ñ —Å–ª—É—Ö–∞—î –∫–∞–Ω–∞–ª–∏...")

    while True:
        try:
            await client.run_until_disconnected()
        except FloodWaitError as e:
            print(f"–û—Ç—Ä–∏–º–∞–Ω–æ FloodWaitError, —á–µ–∫–∞—é {e.seconds} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(e.seconds)

async def check_telegram_channels():
    try:
        return message_queue.get_nowait()
    except asyncio.QueueEmpty:
        return None

async def fetch_last_messages(state, limit=20):
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —É—Å—ñ—Ö –∫–∞–Ω–∞–ª—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ.
    """
    for username in monitored_channels:
        try:
            entity = await client.get_entity(username)
            messages = await client.get_messages(entity, limit=limit)
            for message in reversed(messages):  # –≤—ñ–¥ —Å—Ç–∞—Ä–∏—Ö –¥–æ –Ω–æ–≤–∏—Ö
                text = message.raw_text
                url = f"https://t.me/{username}/{message.id}"
                classified = classify_message(text, url)
                if classified and classified["id"] not in state.get('sent', []):
                    await message_queue.put(classified)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ {username}: {e}")
