# alert_sources/telegram_checker.py
import os
import asyncio
import time
import json
from pathlib import Path
from datetime import datetime, timedelta, timezone

from telethon import TelegramClient, events
from telethon.errors import FloodWaitError
from telethon.sessions import StringSession
from dotenv import load_dotenv

from utils.filter import classify_message
from web import server  # live-—Å—Ç–∞—Ç—É—Å —Ç–∞ SSE

# =========================
# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É —à–ª—è—Ö—É
# =========================
BASE_DIR = Path(__file__).resolve().parents[1]
ENV_PATH = BASE_DIR / ".env"
load_dotenv(dotenv_path=ENV_PATH)

API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
STRING = (os.getenv("TELETHON_SESSION") or "").strip()

print(f"[ENV] .env at: {ENV_PATH}")
print(f"[ENV] TELETHON_SESSION loaded: {'YES' if STRING else 'NO'}")
print(f"[ENV] API_ID={API_ID} (hash present: {'YES' if API_HASH else 'NO'})")

client = TelegramClient(
    StringSession(STRING) if STRING else "session",
    API_ID,
    API_HASH,
    flood_sleep_threshold=120
)

message_queue = asyncio.Queue()
catch_up_messages = []

CHANNELS_PATH = BASE_DIR / "alert_sources" / "channels.json"
with open(CHANNELS_PATH, "r", encoding="utf-8") as f:
    monitored_channels = json.load(f)
print(f"[CFG] Loaded {len(monitored_channels)} channels from {CHANNELS_PATH}")

OFFICIAL_ALARM_SOURCES = {"air_alert_ua"}

_RECENT_SIGS = set()
_MAX_SIGS = 500
_THROTTLE_SECONDS = 10.0
_last_handled_at: dict[str, float] = {}

ALARM_PHRASES = [
    "–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞", "–≤—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏",
    "–≤–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞", "–æ—Ç–±–æ–π —Ç—Ä–µ–≤–æ–≥–∏",
]

THREAT_KEYWORDS = [
    "—à–∞—Ö–µ–¥", "shahed", "–±–ø–ª–∞", "–¥—Ä–æ–Ω", "–¥—Ä–æ–Ω–∏",
    "—Ä–∞–∫–µ—Ç–∞", "—Ä–∞–∫–µ—Ç–Ω", "–±–∞–ª—ñ—Å—Ç", "—ñ—Å–∫–∞–Ω–¥–µ—Ä", "–∫–∏–Ω–∂–∞–ª", "–∫–∞–ª—ñ–±—Ä",
    "–ø—É—Å–∫", "–∑–∞–ø—É—Å–∫", "–∑–ª—ñ—Ç", "–∑–ª—å–æ—Ç", "–∞–≤—ñ–∞—Ü—ñ—è",
    "—É–¥–∞—Ä", "–æ–±—Å—Ç—Ä—ñ–ª", "–≤–∏–±—É—Ö", "–ø—Ä–∏–ª—ñ—Ç", "–ø—Ä–∏–ª—å–æ—Ç",
    "—Å–∏—Ä–µ–Ω–∞", "–Ω–µ–±–µ–∑–ø–µ–∫–∞", "–∑–∞–≥—Ä–æ–∑–∞", "üõµ", "üöÄ", "üí•", "‚úàÔ∏è", "üí£",
]

REGION_KEYWORDS = [
    "–±—Ä–æ–≤–∞—Ä", "–±—Ä–æ–≤–∞—Ä–∏", "–±—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π",
    "–∫–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–∫–∏—ó–≤—â–∏–Ω–∞", "–∫–∏—ó–≤",
    "–∫–Ω—è–∂–∏—á", "—Ç—Ä–µ–±—É—Ö", "–∫–∞–ª–∏–Ω—ñ–≤–∫", "–≤–µ–ª–∏–∫–∞ –¥–∏–º–µ—Ä", "–º–∞–ª–∞ –¥–∏–º–µ—Ä",
    "–±–æ–≥–¥–∞–Ω—ñ–≤–∫", "–∫—Ä–∞—Å–∏–ª—ñ–≤–∫", "–ø–æ–≥—Ä–µ–±–∏", "–∑–∞–∑–∏–º", "–ª—ñ—Ç–∫–∏", "–ø—É—Ö—ñ–≤–∫",
    "—Ä–æ–∂–Ω–∏", "—Å–≤—ñ—Ç–∏–ª—å–Ω", "—Å–µ–º–∏–ø–æ–ª–∫", "–∫–≤—ñ—Ç–Ω–µ–≤", "–ø–µ—Ä–µ–º–æ–≥", "–≥–æ–≥–æ–ª", "–∫–∞–ª–∏—Ç–∞",
    "–±–æ—Ä–∏—Å–ø—ñ–ª", "—Ç—Ä–æ—î—â–∏–Ω", "–ª—ñ—Å–æ–≤", "–¥–∞—Ä–Ω–∏—Ü", "–≤–∏—à–≥–æ—Ä–æ–¥", "–æ–±—É—Ö", "—ñ—Ä–ø—ñ–Ω", "–±—É—á–∞",
    "–≥–æ—Å—Ç–æ–º–µ–ª", "–≤–∏—à–Ω–µ–≤", "–≤–∞—Å–∏–ª—å–∫", "–±–µ—Ä–µ–∑–∞–Ω", "–±–∞—Ä–∏—à—ñ–≤–∫",
]

def _passes_prefilter_when_active(lower: str) -> bool:
    # –ø—ñ–¥ —á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ —î —Ñ—Ä–∞–∑–∏ —Ç—Ä–∏–≤–æ–≥–∏/–≤—ñ–¥–±–æ—é, –∞–±–æ —î –∑–∞–≥—Ä–æ–∑–∞, –∞–±–æ —î —Ç–æ–ø–æ–Ω—ñ–º
    return any(p in lower for p in ALARM_PHRASES) or \
           any(k in lower for k in THREAT_KEYWORDS) or \
           any(k in lower for k in REGION_KEYWORDS)

@client.on(events.NewMessage(chats=monitored_channels))
async def handle_all_messages(event):
    username = getattr(event.chat, 'username', None)
    if not username:
        return

    text = event.message.text or ""
    lower = text.lower()
    url = f"https://t.me/{username}/{event.message.id}"

    alert_active = bool(server.status.get("alert_active"))

    # –ù–µ–æ—Ñ—ñ—Ü—ñ–π–Ω—ñ –∫–∞–Ω–∞–ª–∏: —á–∏—Ç–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥ —á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏
    if username not in OFFICIAL_ALARM_SOURCES and not alert_active:
        return

    # –¢—Ä–æ—Ç–ª—ñ–Ω–≥/–ø—Ä–µ—Ñ—ñ–ª—å—Ç—Ä –¥–ª—è –Ω–µ–æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö –ø—ñ–¥ —á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏
    if username not in OFFICIAL_ALARM_SOURCES:
        now = time.monotonic()
        last = _last_handled_at.get(username, 0.0)
        if (now - last) < _THROTTLE_SECONDS:
            return
        _last_handled_at[username] = now
        if not _passes_prefilter_when_active(lower):
            return

    # Debounce
    sig = hash((username, text))
    if sig in _RECENT_SIGS:
        return
    _RECENT_SIGS.add(sig)
    if len(_RECENT_SIGS) > _MAX_SIGS:
        _RECENT_SIGS.pop()

    # –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è (–ø–µ—Ä–µ–¥–∞—î–º–æ –¥–∂–µ—Ä–µ–ª–æ)
    classified = classify_message(text, url, source=username)
    print(f"[TELEGRAM CHECKER] @{username} ‚Üí {classified}")

    if not classified:
        return

    # –ë–µ–∑–ø–µ–∫–∞: –±—É–¥—å-—è–∫—ñ alarm/all_clear –Ω–µ –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ –∑–Ω–∏–∑–∏—Ç–∏ –¥–æ info
    if classified["type"] in ("alarm", "all_clear") and username not in OFFICIAL_ALARM_SOURCES:
        classified["type"] = "info"

    # –æ–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±-—Å—Ç–∞—Ç—É—Å
    server.status["last_messages"].append({
        "text": text,
        "username": username,
        "url": url,
        "date": event.message.date.isoformat(),
    })
    if len(server.status["last_messages"]) > 50:
        server.status["last_messages"] = server.status["last_messages"][-50:]

    # —É —á–µ—Ä–≥—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É
    classified["date"] = event.message.date.replace(tzinfo=timezone.utc)
    await message_queue.put(classified)
    await server.push_update()

async def start_monitoring():
    await client.start()
    await client.run_until_disconnected()

async def check_telegram_channels():
    if not message_queue.empty():
        return await message_queue.get()
    return None

# catch-up –Ω–µ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –∑ main.py
async def fetch_last_messages(minutes: int):
    if not await client.is_user_authorized():
        print("‚ùó –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –¥–ª—è –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
        return

    monitor_start_time = datetime.now(timezone.utc) - timedelta(minutes=minutes)
    print(f"üîÑ –ü—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ {monitor_start_time.isoformat()}")

    for username in monitored_channels:
        try:
            entity = await client.get_entity(username)
            try:
                messages = await client.get_messages(entity, limit=50)
            except FloodWaitError as e:
                print(f"‚è≥ Flood wait {e.seconds}s –Ω–∞ {username}")
                await asyncio.sleep(e.seconds)
                continue

            for msg in reversed(messages):
                if msg.date.replace(tzinfo=timezone.utc) >= monitor_start_time:
                    cl = classify_message(msg.text or "", f"https://t.me/{username}/{msg.id}", source=username)
                    if cl:
                        if cl["type"] in ("alarm", "all_clear") and username not in OFFICIAL_ALARM_SOURCES:
                            cl["type"] = "info"
                        cl["date"] = msg.date.replace(tzinfo=timezone.utc)
                        catch_up_messages.append(cl)
            await asyncio.sleep(0.3)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ {username}: {e}")

async def get_catch_up_messages():
    return catch_up_messages


# THREAT_KEYWORDS = [
#     "üõµ", "üöÄ", "üí•", "‚úàÔ∏è", "üí£",
#     "—à–∞—Ö–µ–¥", "—à–∞—Ö–µ–¥–∏", "shahed", "—à–∞hed",
#     "–¥—Ä–æ–Ω", "–¥—Ä–æ–Ω–∏", "–±–ø–ª–∞", "–±–µ–∑–ø—ñ–ª–æ—Ç–Ω–∏–∫", "–±–µ–∑–ø—ñ–ª–æ—Ç–Ω–∏–∫–∏",
#     "—Ä–∞–∫–µ—Ç–∞", "—Ä–∞–∫–µ—Ç–∏", "—Ä–∞–∫–µ—Ç–Ω",
#     "–±–∞–ª—ñ—Å—Ç–∏–∫–∞", "–±–∞–ª—ñ—Å—Ç–∏—á–Ω",
#     "—ñ—Å–∫–∞–Ω–¥–µ—Ä", "–∫–∏–Ω–∂–∞–ª", "–∫–∞–ª—ñ–±—Ä",
#     "–ø—É—Å–∫", "–ø—É—Å–∫–∏", "–∑–∞–ø—É—Å–∫", "–∑–∞–ø—É—Å–∫–∏",
#     "–∑–ª—ñ—Ç", "–∑–ª—å–æ—Ç", "–∞–≤—ñ–∞—Ü—ñ—è",
#     "—É–¥–∞—Ä", "—É–¥–∞—Ä–∏", "–æ–±—Å—Ç—Ä—ñ–ª", "–æ–±—Å—Ç—Ä—ñ–ª–∏",
#     "–≤–∏–±—É—Ö", "–≤–∏–±—É—Ö–∏", "–ø—Ä–∏–ª—ñ—Ç", "–ø—Ä–∏–ª—å–æ—Ç", "–ø—Ä–∏–ª—å–æ—Ç–∏",
#     "—Å–∏—Ä–µ–Ω–∞", "–Ω–µ–±–µ–∑–ø–µ–∫–∞", "–∑–∞–≥—Ä–æ–∑–∞",
#     "—à–∞—Ö–µ–¥–æ–≤", "–¥—Ä–æ–Ω–æ–≤", "–±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫", "–±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–∏",
#     "—Ä–∞–∫–µ—Ç—ã", "—Ä–∞–∫–µ—Ç–Ω", "–±–∞–ª–ª–∏—Å—Ç–∏–∫", "–∏—Å–∫–∞–Ω–¥–µ—Ä", "–∫–∞–ª–∏–±—Ä",
#     "–≤–∑–ª–µ—Ç", "–∞–≤–∏–∞—Ü–∏—è",
#     "—É–¥–∞—Ä", "—É–¥–∞—Ä—ã", "–æ–±—Å—Ç—Ä–µ–ª", "–æ–±—Å—Ç—Ä–µ–ª—ã",
#     "–≤–∑—Ä—ã–≤", "–≤–∑—Ä—ã–≤—ã", "–ø—Ä–∏–ª–µ—Ç", "–ø—Ä–∏–ª–µ—Ç—ã",
#     "–æ–ø–∞—Å–Ω–æ—Å—Ç", "—É–≥—Ä–æ–∑–∞",
# ]

# REGION_KEYWORDS = [
#     "–±—Ä–æ–≤–∞—Ä", "–±—Ä–æ–≤–∞—Ä–∏", "–±—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π",
#     "–∫–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–∫–∏—ó–≤—â–∏–Ω–∞", "–∫–∏—ó–≤",  # —Ç—ñ–ª—å–∫–∏ —è–∫ —Ö—ñ–Ω—Ç –¥–ª—è info
#     "–∫–Ω—è–∂–∏—á", "—Ç—Ä–µ–±—É—Ö", "–∫–∞–ª–∏–Ω—ñ–≤–∫", "–≤–µ–ª–∏–∫–∞ –¥–∏–º–µ—Ä", "–º–∞–ª–∞ –¥–∏–º–µ—Ä",
#     "–±–æ–≥–¥–∞–Ω—ñ–≤–∫", "–∫—Ä–∞—Å–∏–ª—ñ–≤–∫", "–ø–æ–≥—Ä–µ–±–∏", "–∑–∞–∑–∏–º", "–ª—ñ—Ç–∫–∏", "–ø—É—Ö—ñ–≤–∫",
#     "—Ä–æ–∂–Ω–∏", "—Å–≤—ñ—Ç–∏–ª—å–Ω", "—Å–µ–º–∏–ø–æ–ª–∫", "–∫–≤—ñ—Ç–Ω–µ–≤", "–ø–µ—Ä–µ–º–æ–≥", "–≥–æ–≥–æ–ª", "–∫–∞–ª–∏—Ç–∞",
#     "–±–æ—Ä–∏—Å–ø—ñ–ª", "—Ç—Ä–æ—î—â–∏–Ω", "–ª—ñ—Å–æ–≤", "–¥–∞—Ä–Ω–∏—Ü", "–≤–∏—à–≥–æ—Ä–æ–¥", "–æ–±—É—Ö", "—ñ—Ä–ø—ñ–Ω", "–±—É—á–∞",
#     "–≥–æ—Å—Ç–æ–º–µ–ª", "–≤–∏—à–Ω–µ–≤", "–≤–∞—Å–∏–ª—å–∫", "–±–µ—Ä–µ–∑–∞–Ω", "–±–∞—Ä–∏—à—ñ–≤–∫",
# ]