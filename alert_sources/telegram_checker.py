import os
import json
import asyncio
from telethon import TelegramClient, events
from dotenv import load_dotenv

load_dotenv()

api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")

client = TelegramClient('session', api_id, api_hash)
message_queue = asyncio.Queue()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤
with open("alert_sources/channels.json", "r") as f:
    monitored_channels = set(json.load(f))

# --- –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –∑–∞–≥—Ä–æ–∑–∏ ---
def detect_threat(text):
    lower = text.lower()
    if "—à–∞—Ö–µ–¥" in lower:
        return "–®–∞—Ö–µ–¥–∏"
    elif "—Ä–∞–∫–µ—Ç–∞" in lower:
        return "–†–∞–∫–µ—Ç–∏"
    elif "–±–∞–ª—ñ—Å—Ç" in lower:
        return "–ë–∞–ª—ñ—Å—Ç–∏–∫–∞"
    return None

# --- –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
@client.on(events.NewMessage())
async def handler(event):
    sender = await event.get_sender()
    if hasattr(sender, 'username') and sender.username in monitored_channels:
        text = event.raw_text
        threat_type = detect_threat(text)

        await message_queue.put({
            "text": text,
            "id": event.id,
            "url": f"https://t.me/{sender.username}/{event.id}",
            "threat_type": threat_type,
            "district": "–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω"  # –º–æ–∂–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –ª–æ–≥—ñ–∫—É, —è–∫—â–æ —Ç—Ä–µ–±–∞
        })

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telethon ---
async def start_monitoring():
    await client.start()
    print("üü¢ Telethon –∑–∞–ø—É—â–µ–Ω–æ —ñ —Å–ª—É—Ö–∞—î –∫–∞–Ω–∞–ª–∏...")
    await client.run_until_disconnected()

# --- –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —á–µ—Ä–≥–∏ ---
async def check_telegram_channels():
    try:
        return message_queue.get_nowait()
    except asyncio.QueueEmpty:
        return None
