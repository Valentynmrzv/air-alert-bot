import os
import asyncio
from datetime import datetime
from dotenv import load_dotenv
import alert_sources.telegram_checker as tg_checker
from utils.sender import send_alert_message, send_alert_with_screenshot, send_start_message, edit_message
from utils.screenshot import take_alert_screenshot
from utils.state_manager import load_state, save_state
from web import server  # –Ü–º–ø–æ—Ä—Ç –≤–µ–±—Å–µ—Ä–≤–µ—Ä–∞ –∑ server.py

load_dotenv()

async def monitor_loop(channel_id: int, user_chat_id: int, start_time: datetime):
    state = load_state()
    alert_active = state.get("alert_active", False)
    threat_sent = set(state.get("threat_sent", []))

    print("üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ '–Ω–∞–∑–¥–æ–≥–∞–Ω—è—é—á–∏–π' —Ä–µ–∂–∏–º...")
    catch_up_messages = await tg_checker.get_catch_up_messages()
    catch_up_messages.sort(key=lambda x: x['date'])

    for msg in catch_up_messages:
        district = msg.get("district", "").lower()
        text = msg.get("text", "")
        msg_id = msg.get("id")

        if msg["type"] == "alarm" and not alert_active:
            alert_active = True
            threat_sent.clear()
            print(f"   [CATCH-UP] –ê–∫—Ç–∏–≤–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ —É {district.title()}.")

        elif msg["type"] == "all_clear" and alert_active:
            alert_active = False
            print(f"   [CATCH-UP] –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É {district.title()}.")

        elif msg["type"] == "info" and alert_active and msg_id not in threat_sent:
            threat_sent.add(msg_id)
            print(f"   [CATCH-UP] –ù–æ–≤–∏–Ω–∞ –ø—ñ–¥ —á–∞—Å —Ç—Ä–∏–≤–æ–≥–∏: {text[:50]}...")

    state["alert_active"] = alert_active
    state["threat_sent"] = list(threat_sent)
    save_state(state)
    print(f"‚úÖ '–ù–∞–∑–¥–æ–≥–∞–Ω—è—é—á–∏–π' —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ. alert_active={alert_active}")

    while True:
        msg = await tg_checker.check_telegram_channels()
        if not msg:
            await asyncio.sleep(1)
            continue

        # --- –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –≤–µ–±–ø–∞–Ω–µ–ª—ñ ---
        server.status["messages_received"] += 1

        district = msg.get("district", "").lower()
        text = msg.get("text", "")
        msg_id = msg.get("id")

        if district not in ["–±—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–∫–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å"]:
            continue

        if msg["type"] == "alarm" and not alert_active:
            alert_active = True
            threat_sent.clear()
            state["alert_active"] = alert_active
            state["threat_sent"] = list(threat_sent)
            save_state(state)

            server.status["alert_active"] = True
            server.status["logs"].append(f"–¢—Ä–∏–≤–æ–≥–∞ —É {district.title()}: {text[:50]}")

            alert_text = f"üö® –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ —É {district.title()}!"
            screenshot_path = await take_alert_screenshot()
            if screenshot_path:
                await send_alert_with_screenshot(alert_text, screenshot_path, chat_id=channel_id)
            else:
                print(f"Sending alert to channel {channel_id}: {alert_text}")
                await send_alert_message(alert_text, chat_id=channel_id)

        elif msg["type"] == "all_clear" and alert_active:
            alert_active = False
            state["alert_active"] = alert_active
            state["threat_sent"] = list(threat_sent)
            save_state(state)

            server.status["alert_active"] = False
            server.status["logs"].append(f"–í—ñ–¥–±—ñ–π —É {district.title()}: {text[:50]}")

            alert_text = f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É {district.title()}!"
            print(f"Sending alert to channel {channel_id}: {alert_text}")
            await send_alert_message(alert_text, chat_id=channel_id)

        elif msg["type"] == "info" and alert_active and msg_id not in threat_sent:
            server.status["logs"].append(f"–ù–æ–≤–∏–Ω–∞: {text[:50]}")
            await send_alert_message(f"‚ö†Ô∏è {text}", notify=False, chat_id=channel_id)
            threat_sent.add(msg_id)
            state["threat_sent"] = list(threat_sent)
            save_state(state)


async def uptime_loop(user_chat_id: int, start_time: datetime):
    state = load_state()

    # –ü—Ä–∏ –∫–æ–∂–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ —Å—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    start_message_id = await send_start_message(start_time, user_chat_id)
    if start_message_id:
        state["start_message_id"] = start_message_id
        save_state(state)

    # –ü—Ä–∏ –∫–æ–∂–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–∞–π–º–µ—Ä–æ–º
    timer_message_id = await send_alert_message("üïí –¢–∞–π–º–µ—Ä —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞: 0 –≥–æ–¥ 0 —Ö–≤", notify=False, chat_id=user_chat_id)
    if timer_message_id:
        state["timer_message_id"] = timer_message_id
        save_state(state)

    while True:
        await asyncio.sleep(300)  # –æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
        await edit_message(timer_message_id, start_time, user_chat_id)


async def main():
    channel_id = int(os.getenv("CHANNEL_ID"))
    user_chat_id = int(os.getenv("USER_CHAT_ID"))
    start_time = datetime.now()

    # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ –±–µ–∑ –∑–∞–ø–∏—Ç—É —Ç–µ–ª–µ—Ñ–æ–Ω—É (–±–æ —Å–µ—Å—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞)
    await tg_checker.client.start()

    if not await tg_checker.client.is_user_authorized():
        print("‚ùó –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ. –ó–∞–ø—É—Å—Ç–∏ authorize.py –¥–ª—è –ø–µ—Ä–≤–∏–Ω–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.")
        return

    # –ü—ñ–¥–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è "–Ω–∞–∑–¥–æ–≥–∞–Ω—è—é—á–æ–≥–æ" —Å—Ç–∞—Ä—Ç—É
    await tg_checker.fetch_last_messages(60)

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±—Å–µ—Ä–≤–µ—Ä
    await server.start_web_server()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—Å—ñ —Ü–∏–∫–ª–∏
    await asyncio.gather(
        tg_checker.start_monitoring(),
        monitor_loop(channel_id, user_chat_id, start_time),
        uptime_loop(user_chat_id, start_time)
    )


if __name__ == "__main__":
    asyncio.run(main())
