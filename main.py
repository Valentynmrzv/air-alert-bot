import asyncio
from datetime import datetime, timedelta
from dotenv import load_dotenv
import alert_sources.telegram_checker as tg_checker
from utils.state_manager import load_state, save_state
from utils.screenshot import take_alert_screenshot
from utils.sender import send_alert_message, send_start_message, edit_message, send_alert_with_screenshot
import os

load_dotenv()

async def monitor_loop(channel_id):
    state = load_state()
    alert_active = False
    threat_sent = set()

    while True:
        result = await tg_checker.check_telegram_channels()

        if result:
            text = result['text']
            link = result['url']
            msg_id = result['id']
            district = result.get('district', '–ë—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω')
            threat = result.get('threat_type')

            if "—Ç—Ä–∏–≤–æ–≥–∞" in text.lower() and msg_id not in state['sent']:
                message = f"üö® *–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!*\nüìç {district}"
                screenshot_path = await take_alert_screenshot()
                try:
                    await send_alert_with_screenshot(message, screenshot_path, chat_id=channel_id)
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç—Ä–∏–≤–æ–≥–∏: {e}")
                state['sent'].append(msg_id)
                alert_active = True
                save_state(state)

            elif "–≤—ñ–¥–±—ñ–π" in text.lower() and msg_id not in state['sent']:
                message = f"‚úÖ *–í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏.*\nüìç {district}"
                try:
                    await send_alert_message(message, notify=True, chat_id=channel_id)
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–±–æ—é: {e}")
                state['sent'].append(msg_id)
                alert_active = False
                threat_sent.clear()
                save_state(state)

            elif alert_active and msg_id not in threat_sent:
                try:
                    if threat:
                        message = f"üîª *–¢–∏–ø –∑–∞–≥—Ä–æ–∑–∏:* {threat}\nüìç {district}\n[–î–∂–µ—Ä–µ–ª–æ]({link})"
                        await send_alert_message(message, notify=False, chat_id=channel_id)
                    else:
                        message = f"‚ÑπÔ∏è {text}\n[–î–∂–µ—Ä–µ–ª–æ]({link})"
                        await send_alert_message(message, notify=False, chat_id=channel_id)
                    threat_sent.add(msg_id)
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: {e}")

        await asyncio.sleep(2)

async def main():
    start_time = datetime.now()
    monitor_start_time = start_time - timedelta(minutes=10)

    user_chat_id = os.getenv("USER_CHAT_ID")
    channel_id = os.getenv("CHANNEL_ID")

    state = load_state()

    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —ñ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Telethon
    await tg_checker.client.connect()
    if not await tg_checker.client.is_user_authorized():
        print("‚ùó –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø—É—Å—Ç—ñ—Ç—å authorize.py –¥–ª—è –ø–µ—Ä–≤–∏–Ω–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.")
        return

    # –ü—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –ø—ñ–¥—Ö–æ–ø–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ö–≤
    await tg_checker.fetch_last_messages(monitor_start_time)
    save_state(state)

    if "start_message_id" not in state or state["start_message_id"] is None:
        start_message_id = await send_start_message(start_time, user_chat_id)
        if start_message_id is None:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∑–∞–≤–µ—Ä—à—É—î–º–æ.")
            return
        state["start_message_id"] = start_message_id
        save_state(state)
    else:
        start_message_id = state["start_message_id"]

    if "timer_message_id" not in state or state["timer_message_id"] is None:
        timer_message_id = await send_alert_message("üïí –¢–∞–π–º–µ—Ä —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞: 0 –≥–æ–¥ 0 —Ö–≤", notify=False, chat_id=user_chat_id)
        if timer_message_id is None:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–∞–π–º–µ—Ä, –∑–∞–≤–µ—Ä—à—É—î–º–æ.")
            return
        state["timer_message_id"] = timer_message_id
        save_state(state)
    else:
        timer_message_id = state["timer_message_id"]

    async def update_status():
        while True:
            if timer_message_id:
                try:
                    await edit_message(start_time, timer_message_id, user_chat_id)
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            await asyncio.sleep(1800)

    await asyncio.gather(
        tg_checker.start_monitoring(),
        monitor_loop(channel_id),
        update_status()
    )

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("‚õî –ó—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É.")
