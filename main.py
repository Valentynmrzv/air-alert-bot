# main.py
import os
import asyncio
from datetime import datetime
from dotenv import load_dotenv

import alert_sources.telegram_checker as tg_checker
from utils.sender import (
    send_alert_message,
    send_alert_with_screenshot,
    send_start_message,
    edit_message,
)
from utils.screenshot import take_alert_screenshot
from utils.state_manager import load_state, save_state
from web import server

load_dotenv()

# –î–≤–∞ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ —Ä–µ–≥—ñ–æ–Ω–∏
ALLOWED_DISTRICTS = {"–±—Ä–æ–≤–∞—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–∫–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å"}


def update_alert_status(active: bool, state: dict, server_status: dict):
    state["alert_active"] = active
    server_status["alert_active"] = active
    save_state(state)
    print(f"[STATUS] alert_active –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É {active}")


async def monitor_loop(channel_id: int, user_chat_id: int, start_time: datetime):
    state = load_state()
    alert_active = state.get("alert_active", False)
    threat_sent = set(state.get("threat_sent", []))

    while True:
        msg = await tg_checker.check_telegram_channels()
        if not msg:
            await asyncio.sleep(1)
            continue

        # –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–∞—Ç—É –¥–ª—è —Å—Ç–∞—Ç—É—Å—É
        if isinstance(msg.get("date"), datetime):
            msg["date"] = msg["date"].isoformat()

        server.status["messages_received"] += 1
        server.status["last_messages"].append(msg)
        if len(server.status["last_messages"]) > 100:
            server.status["last_messages"] = server.status["last_messages"][-100:]

        district = (msg.get("district") or "").lower().strip()
        text = msg.get("text", "") or ""
        msg_id = msg.get("id")
        source_url = (msg.get("url") or "").strip()  # —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π air_alert_ua
        threat = msg.get("threat_type")
        region_hit = bool(msg.get("region_hit"))   # –∑ —á–µ–∫–µ—Ä–∞
        rapid_hit = bool(msg.get("rapid_hit"))     # –∑ —á–µ–∫–µ—Ä–∞
        revisor_bonus = bool(msg.get("revisor_bonus"))  # ‚úì –¥–æ–¥–∞–Ω–æ

        # ---------- ALARM / ALL_CLEAR (–æ—Ñ—ñ—Ü—ñ–π–Ω—ñ –ø–æ–¥—ñ—ó –≤–∂–µ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —á–µ–∫–µ—Ä—ñ) ----------
        if msg["type"] in ("alarm", "all_clear"):
            # –ø—Ä–∞—Ü—é—î–º–æ –ª–∏—à–µ –∑ –Ω–∞—à–∏–º–∏ —Ä–µ–≥—ñ–æ–Ω–∞–º–∏
            if district not in ALLOWED_DISTRICTS:
                continue

            # –°—Ç–∞—Ä—Ç —Ç—Ä–∏–≤–æ–≥–∏
            if msg["type"] == "alarm" and not alert_active:
                alert_active = True
                threat_sent.clear()
                update_alert_status(True, state, server.status)

                server.status["logs"].append(
                    f"–¢—Ä–∏–≤–æ–≥–∞ —É {district.title()}: {text[:120]}"
                )
                if len(server.status["logs"]) > 100:
                    server.status["logs"] = server.status["logs"][-100:]

                alert_text = (
                    f"üö® –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ ‚Äî {district.title()}!\n"
                    + (f"‚Ä¢ –ú–æ–∂–ª–∏–≤–∞ –∑–∞–≥—Ä–æ–∑–∞: {threat}\n" if threat else "")
                    + (f"‚Ä¢ –î–∂–µ—Ä–µ–ª–æ: {source_url}\n" if source_url else "")
                    + "–ë—É–¥—å—Ç–µ –≤ —É–∫—Ä–∏—Ç—Ç—è—Ö."
                )
                screenshot_path = await take_alert_screenshot()
                if screenshot_path:
                    await send_alert_with_screenshot(
                        alert_text, screenshot_path, chat_id=channel_id
                    )
                else:
                    # Markdown —Ç—É—Ç –±–µ–∑–ø–µ—á–Ω–∏–π (—Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–æ–≤–∞–Ω–∏–π)
                    await send_alert_message(
                        alert_text, notify=True, chat_id=channel_id, parse_mode="Markdown"
                    )

            # –í—ñ–¥–±—ñ–π
            elif msg["type"] == "all_clear" and alert_active:
                alert_active = False
                update_alert_status(False, state, server.status)

                server.status["logs"].append(
                    f"–í—ñ–¥–±—ñ–π —É {district.title()}: {text[:120]}"
                )
                if len(server.status["logs"]) > 100:
                    server.status["logs"] = server.status["logs"][-100:]

                alert_text = (
                    f"‚úÖ –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ ‚Äî {district.title()}!\n"
                    + (f"‚Ä¢ –î–∂–µ—Ä–µ–ª–æ: {source_url}" if source_url else "")
                )
                await send_alert_message(
                    alert_text, notify=True, chat_id=channel_id, parse_mode="Markdown"
                )

            state["threat_sent"] = list(threat_sent)
            save_state(state)
            continue

        # ---------- INFO –ü–Ü–î –ß–ê–° –¢–†–ò–í–û–ì–ò ----------
        # –ü—ñ–¥ —á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ —à–ª–µ–º–æ –≤ –∫–∞–Ω–∞–ª info, —è–∫—â–æ:
        #   - —î –Ω–∞—à—ñ GEO (region_hit), –ê–ë–û
        #   - —Ü–µ —à–≤–∏–¥–∫–∞ –∑–∞–≥—Ä–æ–∑–∞ (rapid_hit: –±–∞–ª—ñ—Å—Ç–∏–∫–∞/–ú—ñ–ì/–ø—É—Å–∫), –ê–ë–û
        #   - —Ü–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∞–ø–¥–µ–π—Ç –≤—ñ–¥ bro_revisor (revisor_bonus).
        if msg["type"] == "info" and alert_active and msg_id not in threat_sent:
            if region_hit or rapid_hit or revisor_bonus:
                server.status["logs"].append(f"–ù–æ–≤–∏–Ω–∞: {text[:160]}")
                if len(server.status["logs"]) > 100:
                    server.status["logs"] = server.status["logs"][-100:]

                # –í–ê–ñ–õ–ò–í–û: –±–µ–∑ parse_mode ‚Äî –Ω–µ –ª–∞–º–∞—î–º–æ —Å–∏—Ä—ñ URL –∑ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è–º–∏
                forward_text = f"‚ö†Ô∏è {text}"
                if source_url:
                    forward_text += f"\n‚Ä¢ –î–∂–µ—Ä–µ–ª–æ: {source_url}"
                await send_alert_message(
                    forward_text, notify=False, chat_id=channel_id, parse_mode=None
                )

                threat_sent.add(msg_id)
                state["threat_sent"] = list(threat_sent)
                save_state(state)
            else:
                # –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —á–æ–º—É –ø—Ä–æ–ø—É—â–µ–Ω–æ
                why = []
                if not region_hit:
                    why.append("–Ω–µ–º–∞ GEO")
                if not rapid_hit:
                    why.append("–Ω–µ–º–∞ RAPID")
                if not revisor_bonus:
                    why.append("–Ω–µ–º–∞ REVISOR")
                server.status["logs"].append(
                    f"–ü—Ä–æ–ø—É—â–µ–Ω–æ info ({', '.join(why)}): {text[:120]}"
                )
                if len(server.status["logs"]) > 100:
                    server.status["logs"] = server.status["logs"][-100:]


async def uptime_loop(user_chat_id: int, start_time: datetime):
    state = load_state()

    start_message_id = await send_start_message(start_time, user_chat_id)
    if start_message_id:
        state["start_message_id"] = start_message_id
        save_state(state)

    timer_message_id = await send_alert_message(
        "üïí –¢–∞–π–º–µ—Ä —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞: 0 –≥–æ–¥ 0 —Ö–≤",
        notify=False,
        chat_id=user_chat_id,
        parse_mode="Markdown",
    )
    if timer_message_id:
        state["timer_message_id"] = timer_message_id
        save_state(state)

    while True:
        await asyncio.sleep(300)
        await edit_message(timer_message_id, start_time, user_chat_id)


async def main():
    channel_id = int(os.getenv("CHANNEL_ID"))
    user_chat_id = int(os.getenv("USER_CHAT_ID"))
    start_time = datetime.now()

    await tg_checker.client.connect()

    if not await tg_checker.client.is_user_authorized():
        try:
            await tg_checker.client.start()
        except Exception as e:
            print(f"‚ùó –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ: {e}")
            print("–û–Ω–æ–≤–∏ TELETHON_SESSION —É .env (QR/–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—ñ—ó).")
            return

    # catch-up –≤–∏–º–∫–Ω–µ–Ω–æ (–µ–∫–æ–Ω–æ–º—ñ—è –ª—ñ–º—ñ—Ç—ñ–≤)
    # await tg_checker.fetch_last_messages(60)

    await server.start_web_server()

    await asyncio.gather(
        tg_checker.start_monitoring(),
        monitor_loop(channel_id, user_chat_id, start_time),
        uptime_loop(user_chat_id, start_time),
    )


if __name__ == "__main__":
    asyncio.run(main())
